<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>heqiao2010</title>
  
  <subtitle>blog of heqiao2010</subtitle>
  <link href="http://heqiao2010.github.io/atom.xml" rel="self"/>
  
  <link href="http://heqiao2010.github.io/"/>
  <updated>2020-10-22T03:32:28.828Z</updated>
  <id>http://heqiao2010.github.io/</id>
  
  <author>
    <name>heqiao2010</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Security 如何优雅的过滤掉静态页面请求</title>
    <link href="http://heqiao2010.github.io/2020/06/30/Spring_Security%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%87%E6%BB%A4%E6%8E%89%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82/"/>
    <id>http://heqiao2010.github.io/2020/06/30/Spring_Security%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%BF%87%E6%BB%A4%E6%8E%89%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82/</id>
    <published>2020-06-30T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.828Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在最近的开发过程中遇到一个问题，某个java服务采用spring security开启了认证，但是同时又需要采用swagger生成在线api文档，如果从这些请求中过滤掉swagger的请求成了一个问题。</p></blockquote><p>想到的方法一,用正则过滤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;&#x2F;xxx&#x2F;!?(doc.html|v2&#x2F;api-docs|springfox.js|swagger-ui.html|swagger-resources|webjars)**&quot;).authenticated();</span><br><span class="line">        http.addFilterBefore(authenticationFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(new ComIdAuthenticationEntryPoint());</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更优雅的方法二，把Swagger的请求当做静态页面请求处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@EnableWebSecurity</span><br><span class="line">public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;String&gt; PERMIT_URL_LIST &#x3D; ImmutableList.of(</span><br><span class="line">            &quot;&#x2F;xxx&#x2F;doc.html*&quot;,</span><br><span class="line">            &quot;&#x2F;xxx&#x2F;v2&#x2F;api-docs&#x2F;**&quot;,</span><br><span class="line">            &quot;&#x2F;xxx&#x2F;springfox.js*&quot;,</span><br><span class="line">            &quot;&#x2F;xxx&#x2F;swagger-ui.html*&quot;,</span><br><span class="line">            &quot;&#x2F;xxx&#x2F;swagger-resources&#x2F;**&quot;,</span><br><span class="line">            &quot;&#x2F;xxx&#x2F;webjars&#x2F;**&quot;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;&#x2F;xxx&#x2F;**&quot;).authenticated();</span><br><span class="line">        http.addFilterBefore(authenticationFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        http.exceptionHandling().authenticationEntryPoint(new ComIdAuthenticationEntryPoint());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(WebSecurity web) throws Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(PERMIT_URL_LIST.toArray(new String[0]));</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在最近的开发过程中遇到一个问题，某个java服务采用spring security开启了认证，但是同时又需要采用swagger生成在线api文档，如果从这些请求中过滤掉swagger的请求成了一个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想</summary>
      
    
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/categories/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>日志归档工具logrotate介绍</title>
    <link href="http://heqiao2010.github.io/2020/06/17/%E5%BF%97%E5%BD%92%E6%A1%A3%E5%B7%A5%E5%85%B7logrotate%E4%BB%8B%E7%BB%8D/"/>
    <id>http://heqiao2010.github.io/2020/06/17/%E5%BF%97%E5%BD%92%E6%A1%A3%E5%B7%A5%E5%85%B7logrotate%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-06-17T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>对于日志的归档，轮转以及清理，很多框架都已经支持，比如logback，log4j等，对于logrotate鲜有用武之地。</p><p>不过最近做一个项目的时候，客户环境存在大量的syslog，但是对这类syslog日志确没有做定时的清理和归档，于是看了下centos自带的logrotate工具，还是蛮方便的。</p><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><p>希望能够做到日志轮转，保留一周的日志，每天的日志保存到一个文件中，一周之前的日志，自动删除；2天之前的日志能够归档压缩；</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在/etc/logrotate.d/目录新增logrotate配置，例如：<br>cat /etc/logrotate.d/test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;data&#x2F;log&#x2F;test.log &#123;</span><br><span class="line">        daily    #每天执行</span><br><span class="line">        missingok # 如果日志不存在，则忽略</span><br><span class="line">        rotate 7  # 保留7天的日志</span><br><span class="line">        create 644 root root  # 新创建文件权限</span><br><span class="line">        dateext  # 用日期作为文件名后缀</span><br><span class="line">        dateformat -%Y%m%d.%s #日期格式</span><br><span class="line">        nocompress  #不需要压缩，compress 表示用gzip压缩</span><br><span class="line">        copytruncate #采用拷贝后截断的方式，归档日志，好处是避免日志归档对正在写这个log的程序出现问题 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.huoding.com/2013/04/21/246">https://blog.huoding.com/2013/04/21/246</a></p><p><a href="https://linux.die.net/man/8/logrotate">https://linux.die.net/man/8/logrotate</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;对于日志的归档，轮转以及清理，很多框架都已经支持，比如logback，log4j等，对于logrotate鲜有用武之地。&lt;/p&gt;
&lt;p&gt;不过</summary>
      
    
    
    
    <category term="logrotate" scheme="http://heqiao2010.github.io/categories/logrotate/"/>
    
    
  </entry>
  
  <entry>
    <title>Freemarker中如何进行Json转化</title>
    <link href="http://heqiao2010.github.io/2019/07/26/Freemarker%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8CJson%E8%BD%AC%E5%8C%96/"/>
    <id>http://heqiao2010.github.io/2019/07/26/Freemarker%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8CJson%E8%BD%AC%E5%8C%96/</id>
    <published>2019-07-26T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>之前在开发过程中,freemarker的解析经常遇见一些问题,这里将这些问题做一下记录.</p><p>比如,如下错误,是因为freemarker模板中出现了一个全角的中文空格,导致解析出现失败.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:(1, 1) java: 非法字符: &#39;\ufeff&#39;</span><br></pre></td></tr></table></figure><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>需求是,从freemarker中构造出一个Json,然后将这个json进行url编码,放到一个url后面,用户点击这个url,则立即可以跳转到指定的页面,页面再根据这个参数做相应的解析.</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在freemarker中,是通过拼凑Json字段进行处理的.在拼凑Json字段的过程中,会涉及字段的转义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.params.group?j_string</span><br></pre></td></tr></table></figure><p>以及urlencode:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign url_param&#x3D;&quot;search&#x3D;$&#123;search?url&#125;&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>还有特别重要的是,有些字段需要判空,判空有好几种形式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;#--条件判空--&gt;</span><br><span class="line">&lt;#if event.params.processName?? &gt;</span><br><span class="line">            &lt;#assign processName &#x3D; event.params.processName?j_string &#x2F;&gt; </span><br><span class="line">&lt;&#x2F;#if&gt; </span><br><span class="line"></span><br><span class="line">&lt;#--感叹号判空--&gt;</span><br><span class="line">&lt;#assign filePath &#x3D; (event.params.filePath!&quot;&quot;)?j_string &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;#--为空,则展示为空串--&gt;</span><br><span class="line">$&#123;(grouplist)!&#125;</span><br></pre></td></tr></table></figure><p>整体例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;#macro detailLinkParams aggregateAgentEvents&gt;</span><br><span class="line">        &lt;#setting url_escaping_charset&#x3D;&#39;utf8&#39;&#x2F;&gt;</span><br><span class="line">        &lt;#if (aggregateAgentEvents?size&gt;0) &gt; </span><br><span class="line">&lt;#--连接进程--&gt;</span><br><span class="line">&lt;#assign processName&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;#--业务组--&gt;</span><br><span class="line">&lt;#assign group&#x3D;[] &#x2F;&gt;</span><br><span class="line">&lt;#--主机名--&gt;</span><br><span class="line">&lt;#assign hostname&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;#--端口--&gt;</span><br><span class="line">&lt;#assign targetPort&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;#--目标主机--&gt;</span><br><span class="line">&lt;#assign targetIpLike&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;#--主机IP--&gt;</span><br><span class="line">&lt;#assign ip&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">&lt;#--时间区间--&gt;</span><br><span class="line">&lt;#assign time_max &#x3D; aggregateAgentEvents[0].params.dataTime&#x2F;&gt;</span><br><span class="line">&lt;#assign time_min &#x3D; aggregateAgentEvents[0].params.dataTime&#x2F;&gt;</span><br><span class="line">                &lt;#list aggregateAgentEvents as event&gt; </span><br><span class="line">     &lt;#if event.params.group?? &amp;&amp; !(group?seq_contains(event.params.group?j_string)) &gt; </span><br><span class="line">     &lt;#assign group &#x3D; group + [event.params.group?j_string] &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;#if&gt; </span><br><span class="line">     &lt;#if event.params.processName?? &gt;</span><br><span class="line">            &lt;#assign processName &#x3D; event.params.processName?j_string &#x2F;&gt; </span><br><span class="line">     &lt;&#x2F;#if&gt;         </span><br><span class="line">     &lt;#if event.params.hostname?? &gt;              </span><br><span class="line">     &lt;#assign hostname &#x3D; event.params.hostname?j_string &#x2F;&gt;  </span><br><span class="line">     &lt;&#x2F;#if&gt;</span><br><span class="line">     &lt;#if event.params.targetPort?? &gt;    </span><br><span class="line">     &lt;#assign targetPort &#x3D; event.params.targetPort?j_string &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;#if&gt;</span><br><span class="line">     &lt;#if event.params.targetIp?? &gt;    </span><br><span class="line">     &lt;#assign targetIpLike &#x3D; event.params.targetIp?j_string &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;#if&gt;</span><br><span class="line">     &lt;#if event.params.displayIp?? &gt;    </span><br><span class="line">     &lt;#assign ip &#x3D; event.params.displayIp?j_string &#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;#if&gt;</span><br><span class="line">     &lt;#if (time_max &lt; event.params.dataTime) &gt;</span><br><span class="line">                            &lt;#assign time_max &#x3D; event.params.dataTime &#x2F;&gt;</span><br><span class="line">                     &lt;&#x2F;#if&gt;</span><br><span class="line">                     &lt;#if (time_min &gt; event.params.dataTime) &gt;</span><br><span class="line">                            &lt;#assign time_min &#x3D; event.params.dataTime &#x2F;&gt;</span><br><span class="line">                     &lt;&#x2F;#if&gt;</span><br><span class="line">                &lt;&#x2F;#list&gt;</span><br><span class="line">                &lt;#assign time_max &#x3D; time_max + 1&#x2F;&gt;</span><br><span class="line">&lt;#assign time_min &#x3D; time_min - 1&#x2F;&gt;</span><br><span class="line">                &lt;#assign time&#x3D;&quot;&#123;\&quot;min\&quot;:\&quot;$&#123;(time_min*1000)?number_to_datetime?string(&#39;yyyy-MM-dd HH:mm:ss&#39;)&#125;\&quot;,\&quot;max\&quot;:\&quot;$&#123;(time_max*1000)?number_to_datetime?string(&#39;yyyy-MM-dd HH:mm:ss&#39;)&#125;\&quot;&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;#assign grouplist &#x3D; group?join(&quot;,&quot;) &#x2F;&gt;</span><br><span class="line">&lt;#if (aggregateAgentEvents?size&#x3D;&#x3D;1) &gt;</span><br><span class="line">&lt;#assign search&#x3D;&quot;&#123;\&quot;processName\&quot;:\&quot;$&#123;(processName)!&#125;\&quot;,\&quot;createTime\&quot;:$&#123;time&#125;,\&quot;group\&quot;:[$&#123;(grouplist)!&#125;],\&quot;ip\&quot;:\&quot;$&#123;(ip)!&#125;\&quot;,\&quot;targetIpLike\&quot;:\&quot;$&#123;(targetIpLike)!&#125;\&quot;,\&quot;targetPort\&quot;:$&#123;(targetPort)!&#125;,\&quot;hostname\&quot;:\&quot;$&#123;(hostname)!&#125;\&quot;&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;#assign search&#x3D;&quot;&#123;\&quot;processName\&quot;:\&quot;$&#123;(processName)!&#125;\&quot;,\&quot;createTime\&quot;:$&#123;time&#125;,\&quot;group\&quot;:[$&#123;(grouplist)!&#125;],\&quot;ip\&quot;:\&quot;$&#123;(ip)!&#125;\&quot;,\&quot;targetIpLike\&quot;:\&quot;$&#123;(targetIpLike)!&#125;\&quot;,\&quot;targetPort\&quot;:$&#123;(targetPort)!&#125;,\&quot;hostname\&quot;:\&quot;$&#123;(hostname)!&#125;\&quot;&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;#if&gt;</span><br><span class="line">                &lt;#assign url_param&#x3D;&quot;search&#x3D;$&#123;search?url&#125;&quot; &#x2F;&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;#assign url_param&#x3D;&quot;a&#x3D;1&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;#if&gt;</span><br><span class="line">$&#123;url_param&#125;&lt;&#x2F;#macro&gt;</span><br></pre></td></tr></table></figure><h3 id="额外的问题"><a href="#额外的问题" class="headerlink" title="额外的问题"></a>额外的问题</h3><p>FreeMarker遍历集合集合时貌似有个要求，集合本身必须是Collection的子类；如果将jackson的JsonNode对象，扔给Freemarker则可能会有问题，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;vuls&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;vuln&quot;: 1,</span><br><span class="line">            &quot;port&quot;: 6379,</span><br><span class="line">            &quot;title&quot;: &quot;xxx&quot;,</span><br><span class="line">            &quot;checkid&quot;: 7,</span><br><span class="line">            &quot;msg&quot;: &quot;xxx!&quot;,</span><br><span class="line">            &quot;hacked_file&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;info&quot;: &quot;xxx&quot;,</span><br><span class="line">                    &quot;path&quot;: &quot;xxx&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;pid&quot;: 1351</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果通过如下模板进行解析，则会出现问题，因为json对象中的数组，无法用freemarker中的list遍历，这点很奇怪。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">XXX ：</span><br><span class="line">&lt;#list vuls as vul&gt;</span><br><span class="line"> &lt;#list vul.hacked_file as item&gt;</span><br><span class="line">  xx：$&#123;item.path&#125;,xxx：$&#123;item.info&#125;</span><br><span class="line"> &lt;&#x2F;#list&gt;</span><br><span class="line">&lt;&#x2F;#list&gt;</span><br></pre></td></tr></table></figure><p>但是可以通过把JsonNode当做字符串处理，在freemarker中用eval进行处理，则没问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;#function parseJSON json&gt;</span><br><span class="line">  &lt;#local null &#x3D; &#39;null&#39;&gt; &lt;#-- null is not a keyword in FTL --&gt;</span><br><span class="line">  &lt;#return json?eval&gt;</span><br><span class="line">&lt;&#x2F;#function&gt;</span><br><span class="line">&lt;#assign jsonObj&#x3D;parseJSON(vuls)&#x2F;&gt;</span><br><span class="line">XXX ：</span><br><span class="line">&lt;#list jsonObj as vul&gt;</span><br><span class="line"> &lt;#list vul.hacked_file as item&gt;</span><br><span class="line">  xx：$&#123;item.path&#125;,xxx：$&#123;item.info&#125;</span><br><span class="line"> &lt;&#x2F;#list&gt;</span><br><span class="line">&lt;&#x2F;#list&gt;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://stackoverflow.com/questions/46154391/how-can-i-iterate-a-collection-twice-in-freemarker#">https://stackoverflow.com/questions/46154391/how-can-i-iterate-a-collection-twice-in-freemarker#</a></p><p><a href="https://stackoverflow.com/questions/17778844/evaluate-json-with-null-value-using-freemarker">https://stackoverflow.com/questions/17778844/evaluate-json-with-null-value-using-freemarker</a></p><p><a href="https://stackoverflow.com/questions/12708162/how-to-get-json-into-a-freemarker-template-ftl">https://stackoverflow.com/questions/12708162/how-to-get-json-into-a-freemarker-template-ftl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;之前在开发过程中,freemarker的解析经常遇见一些问题,这里将这些问题做一下记录.&lt;/p&gt;
&lt;p&gt;比如,如下错误,是因为freemar</summary>
      
    
    
    
    <category term="Freemarker" scheme="http://heqiao2010.github.io/categories/Freemarker/"/>
    
    
    <category term="Freemarker" scheme="http://heqiao2010.github.io/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>ControllerAdvice注解</title>
    <link href="http://heqiao2010.github.io/2019/07/08/ControllerAdvice%E6%B3%A8%E8%A7%A3/"/>
    <id>http://heqiao2010.github.io/2019/07/08/ControllerAdvice%E6%B3%A8%E8%A7%A3/</id>
    <published>2019-07-08T10:00:00.000Z</published>
    <updated>2020-10-22T06:45:32.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><p>准确的来说,这个是springmvc中的一个注解.<br>从Advice后缀可以看出,这个注解是针对Controller的一个增强.在对外提供Http接口支持的时候,往往有很多通用的业务逻辑.最常见的是同样的异常处理逻辑.<br>为了避免大块的try-catch块的出现,可以通过此注解提供一个异常处理的增强来解决.</p><h4 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h4><p>在ControllerAdvice类中标注某个方法,用于处理某个类型的异常.</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 统一处理网关接口异常</span><br><span class="line"> *</span><br><span class="line"> * Created by qiaohe on 19-6-27.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@ControllerAdvice(&quot;com.*&quot;)</span><br><span class="line">public class ExceptionAdvice &#123;</span><br><span class="line">    private final Logger logger &#x3D; LoggerFactory.getLogger(ExceptionAdvice.class);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 处理AuthFailedException</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @ExceptionHandler(AuthFailedException.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public BaseResult handleException(AuthFailedException ex)&#123;</span><br><span class="line">        return BaseResult.failure(ex.getAuthFailedCode().getCode(),</span><br><span class="line">                ex.getAuthFailedCode().getDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="其他两个不常用的注解"><a href="#其他两个不常用的注解" class="headerlink" title="其他两个不常用的注解"></a>其他两个不常用的注解</h4><p>@InitBinder：用来设置WebDataBinder，用于自动绑定前台请求参数到Model中。</p><p>@ModelAttribute：本来作用是绑定键值对到Model中，此处让全局的@RequestMapping都能获得在此处设置的键值对。</p><p>列子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice(basePackages &#x3D; &#123;&quot;com.concretepage.controller&quot;&#125; )</span><br><span class="line">public class GlobalControllerAdvice &#123;</span><br><span class="line">@InitBinder</span><br><span class="line">public void dataBinding(WebDataBinder binder) &#123;</span><br><span class="line">SimpleDateFormat dateFormat &#x3D; new SimpleDateFormat(&quot;dd&#x2F;MM&#x2F;yyyy&quot;);</span><br><span class="line">dateFormat.setLenient(false);</span><br><span class="line">binder.registerCustomEditor(Date.class, &quot;dob&quot;, new CustomDateEditor(dateFormat, true));</span><br><span class="line">&#125;</span><br><span class="line">@ModelAttribute</span><br><span class="line">        public void globalAttributes(Model model) &#123;</span><br><span class="line">model.addAttribute(&quot;msg&quot;, &quot;Welcome to My World!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">@ExceptionHandler(FileNotFoundException.class)</span><br><span class="line">        public ModelAndView myError(Exception exception) &#123;</span><br><span class="line">    ModelAndView mav &#x3D; new ModelAndView();</span><br><span class="line">    mav.addObject(&quot;exception&quot;, exception);</span><br><span class="line">    mav.setViewName(&quot;error&quot;);</span><br><span class="line">    return mav;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.concretepage.com/spring/spring-mvc/spring-mvc-controlleradvice-annotation-example">https://www.concretepage.com/spring/spring-mvc/spring-mvc-controlleradvice-annotation-example</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本功能&quot;&gt;&lt;a href=&quot;#基本功能&quot; class=&quot;headerlink&quot; title=&quot;基本功能&quot;&gt;&lt;/a&gt;基本功能&lt;/h3&gt;&lt;p&gt;准确的来说,这个是springmvc中的一个注解.&lt;br&gt;从Advice后缀可以看出,这个注解是针对Controller的一</summary>
      
    
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习之Profile和Lookup注解</title>
    <link href="http://heqiao2010.github.io/2019/07/02/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8BProfile%E5%92%8CLookup%E6%B3%A8%E8%A7%A3/"/>
    <id>http://heqiao2010.github.io/2019/07/02/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8BProfile%E5%92%8CLookup%E6%B3%A8%E8%A7%A3/</id>
    <published>2019-07-02T10:00:00.000Z</published>
    <updated>2020-10-22T06:45:45.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在编码过程中遇到一个Profile和Lookup注解的问题,这里记录一下.Profile的原意是剖面的意思,Profile在官方的API文档中,是如此描述的:</p></blockquote><blockquote><p>A profile is a named logical grouping that may be activated programmatically via ConfigurableEnvironment.setActiveProfiles(java.lang.String…) or declaratively by setting the spring.profiles.active property as a JVM system property, as an environment variable, or as a Servlet context parameter in web.xml for web applications. Profiles may also be activated declaratively in integration tests via the @ActiveProfiles annotation.</p></blockquote><blockquote><p>通过Profile可以从逻辑上对Bean做一些分组,然后应用中通过配置来选中某一组Bean进行实例化.Lookup注解是用于实现,注入prototype-scoped类型的Bean,一般我们可能习惯用new的方式去实例化非单例模式的Bean.</p></blockquote><h3 id="Profile注解示例"><a href="#Profile注解示例" class="headerlink" title="Profile注解示例"></a>Profile注解示例</h3><p>实现开发环境和生产环境采用不同的数据源.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 开发环境采用mysql数据库</span><br><span class="line">@Profile(&quot;Development&quot;)</span><br><span class="line">@Configuration</span><br><span class="line">public class DevDatabaseConfig implements DatabaseConfig &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource createDataSource() &#123;</span><br><span class="line">        System.out.println(&quot;Creating DEV database&quot;);</span><br><span class="line">        DriverManagerDataSource dataSource &#x3D; new DriverManagerDataSource();</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * Set MySQL specific properties for Development Environment</span><br><span class="line">         *&#x2F;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生产环境采用Oracle数据库</span><br><span class="line">@Profile(&quot;Production&quot;)</span><br><span class="line">@Configuration</span><br><span class="line">public class ProductionDatabaseConfig implements DatabaseConfig &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource createDataSource() &#123;</span><br><span class="line">        System.out.println(&quot;Creating Production database&quot;);</span><br><span class="line">        DriverManagerDataSource dataSource &#x3D; new DriverManagerDataSource();</span><br><span class="line">        &#x2F;*</span><br><span class="line">         * Set ORACLE specific properties for Production environment</span><br><span class="line">         *&#x2F;</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了采用注解,使用配置文件也可以达到同样的效果.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans profile&#x3D;&quot;Development&quot;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;dev-config-context.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br><span class="line"> </span><br><span class="line">&lt;beans profile&#x3D;&quot;Production&quot;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;prod-config-context.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class AppMain &#123;</span><br><span class="line">     </span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">        AnnotationConfigApplicationContext  context &#x3D; new AnnotationConfigApplicationContext();</span><br><span class="line">        &#x2F;&#x2F;Sets the active profiles</span><br><span class="line">        context.getEnvironment().setActiveProfiles(&quot;Development&quot;);</span><br><span class="line">        &#x2F;&#x2F;Scans the mentioned package[s] and register all the @Component available to Spring</span><br><span class="line">        context.scan(&quot;com.websystique.spring&quot;); </span><br><span class="line">        context.refresh();</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lookup注解"><a href="#Lookup注解" class="headerlink" title="Lookup注解"></a>Lookup注解</h3><p>lookup可以实现方法注入,即利用lookup可以让某个单例Bean的某个方法每次都返回一个新的Bean,即prototype类型的Bean.这是依赖CGlib技术实现的,在运行时,修改字节码.</p><p>利用xml文件实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;car&quot; class&#x3D;&quot;com.smart.injectfun.Car&quot; p:brand&#x3D;&quot;红旗CA72&quot;, p:price&#x3D;&quot;2000&quot; scope&#x3D;&quot;prototype&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;magicBoss&quot; class&#x3D;&quot;com.smart.injectfun.MagicBoss&quot;&gt;</span><br><span class="line">    &lt;look-method name&#x3D;&quot;getCar&quot; bean&#x3D;&quot;car&quot;&gt;</span><br><span class="line">&lt;bean&gt;</span><br></pre></td></tr></table></figure><p>也可以通过注解来实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class MagicBossIMpl implements MagicBoss &#123;</span><br><span class="line">    @Lookup</span><br><span class="line">    public Car getCar()&#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.baeldung.com/spring-lookup">https://www.baeldung.com/spring-lookup</a></p><p><a href="http://websystique.com/spring/spring-profile-example/">http://websystique.com/spring/spring-profile-example/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在编码过程中遇到一个Profile和Lookup注解的问题,这里记录一下.Profile的原意是剖面的意思,Profile在官方的API文档中,是如此描述的:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A profile </summary>
      
    
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java诊断工具Arthas之watch命令</title>
    <link href="http://heqiao2010.github.io/2019/07/01/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E4%B9%8Bwatch%E5%91%BD%E4%BB%A4/"/>
    <id>http://heqiao2010.github.io/2019/07/01/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E4%B9%8Bwatch%E5%91%BD%E4%BB%A4/</id>
    <published>2019-07-01T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Arthas是一个开源的Java诊断工具,详见:<a href="https://alibaba.github.io/arthas/index.html">https://alibaba.github.io/arthas/index.html</a>. 今天第一次在项目中排查问题使用到它,发现其功能确实很强大.这里记录一下watch命令的使用.</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装JDK然后以jar包的形式运行即可.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;alibaba.github.io&#x2F;arthas&#x2F;arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><h3 id="利用watch诊断方法调用"><a href="#利用watch诊断方法调用" class="headerlink" title="利用watch诊断方法调用"></a>利用watch诊断方法调用</h3><p>通过Arthas的watch方法可以在没有打印日志的情况下,看到方法的入参和返回值.这点在没有打印debug或者重启会破坏现场的情况下是非常有用的。</p><p>在运行arthas-boot.jar之后，会列出当前系统中的所有java进程，然后输入需要诊断的进程的序号，就进入了arthas的命令模式了。这里以官网上的java -jar arthas-demo.jar为例，毕竟为了信息安全，把在公司的debug信息透出不大好。</p><ol><li><p>首先可以利用sc命令，查询对应的类名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sc *Math*</span><br><span class="line">demo.MathGame</span><br><span class="line">io.netty.util.internal.MathUtil</span><br><span class="line">java.lang.Math</span><br><span class="line">Affect(row-cnt:3) cost in 17 ms.</span><br></pre></td></tr></table></figure></li><li><p>然后再用sm命令，查询对应的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sm demo.MathGame*</span><br><span class="line">demo.MathGame &lt;init&gt;()V</span><br><span class="line">demo.MathGame primeFactors(I)Ljava&#x2F;util&#x2F;List;</span><br><span class="line">demo.MathGame main([Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">demo.MathGame run()V</span><br><span class="line">demo.MathGame print(ILjava&#x2F;util&#x2F;List;)V</span><br><span class="line">Affect(row-cnt:5) cost in 9 ms.</span><br></pre></td></tr></table></figure></li><li><p>利用watch命令，监听指定的方法，-x 参数可以指定打印入参和返回值的深度。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors &quot;&#123;params,returnObj&#125;&quot; -x 2</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 49 ms.</span><br><span class="line">ts&#x3D;2019-07-03 14:29:41; [cost&#x3D;1.778091ms] result&#x3D;@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[-136776],</span><br><span class="line">    ],</span><br><span class="line">    null,</span><br><span class="line">]</span><br><span class="line">ts&#x3D;2019-07-03 14:29:42; [cost&#x3D;0.105508ms] result&#x3D;@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[47524],</span><br><span class="line">    ],</span><br><span class="line">    @ArrayList[</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[109],</span><br><span class="line">        @Integer[109],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我就是利用这个工具，诊断出系统中一个很奇怪的问题。最终原因是因为PHP程序调用Java接口在时序上有略微的差异导致的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Arthas是一个开源的Java诊断工具,详见:&lt;a href=&quot;https://alibaba.github.io/arthas/index.html&quot;&gt;https://alibaba.github.io/arthas/index.html&lt;/a</summary>
      
    
    
    
    <category term="Arthas" scheme="http://heqiao2010.github.io/categories/Arthas/"/>
    
    
    <category term="Arthas" scheme="http://heqiao2010.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>JUC共享锁之Semaphore</title>
    <link href="http://heqiao2010.github.io/2019/06/24/JUC%E5%85%B1%E4%BA%AB%E9%94%81%E4%B9%8BSemaphore/"/>
    <id>http://heqiao2010.github.io/2019/06/24/JUC%E5%85%B1%E4%BA%AB%E9%94%81%E4%B9%8BSemaphore/</id>
    <published>2019-06-24T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Semaphore原意是指信号量,从API的注释:”Semaphores are often used to restrict the number of threads than can access some (physical or logical) resource”可以看出,Semaphore一般是用来限制线程能够使用的资源个数.</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在Web开发中,Semaphore可以用来限制某个接口的并发调用次数.可以在Sping的Context中维护一个Map,key可以是处理线程,value可以是一个Semaphore对象.通过这样的方式,就可以实现系统同时处理的线程数不会超过某个阈值.</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>我们可以通过WebFilter注解,来实现一个过滤器,在过滤器中拦截所有的请求调用,然后通过Semaphore来进行计数,如果超过总的计数,则返回相应的提示信息.当然也可以对URL进行细化,针对每个API提供对应的限制.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * API并发控制过滤器</span><br><span class="line"> * Created by qiaohe</span><br><span class="line"> * Date: 19-7-1 上午11:54</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@WebFilter(urlPatterns &#x3D; &quot;&#x2F;*&quot;, filterName &#x3D; &quot;concurrentRestrictFilter&quot;)</span><br><span class="line">public class ConcurrentRestrictFilter implements Filter &#123;</span><br><span class="line">    private Log log &#x3D; LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    private static final Integer MAX_CONCURRENT_NUM &#x3D; 1;</span><br><span class="line"></span><br><span class="line">    private static final Semaphore semaphore &#x3D; new Semaphore(MAX_CONCURRENT_NUM);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        log.info(&quot;before acquire: &quot; + semaphore.availablePermits());</span><br><span class="line">        if(!semaphore.tryAcquire())&#123;</span><br><span class="line">            if(response instanceof HttpServletResponse)&#123;</span><br><span class="line">                HttpServletResponse res &#x3D; (HttpServletResponse)response;</span><br><span class="line">                res.setContentType(MimeTypeUtils.APPLICATION_JSON_VALUE);</span><br><span class="line">                res.sendError(HttpStatus.BAD_REQUEST.value(), &quot;reach max current num&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(&quot;after acquire: &quot; + semaphore.availablePermits());</span><br><span class="line">        try&#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">            log.info(&quot;release: &quot; + semaphore.availablePermits());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Semaphore原意是指信号量,从API的注释:”Semaphores are often used to restrict the number of threads than can access some (physical or logi</summary>
      
    
    
    
    <category term="Java并发基础" scheme="http://heqiao2010.github.io/categories/Java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="http://heqiao2010.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何将jar包发布到中央仓库</title>
    <link href="http://heqiao2010.github.io/2019/06/21/%E5%A6%82%E4%BD%95%E5%B0%86jar%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
    <id>http://heqiao2010.github.io/2019/06/21/%E5%A6%82%E4%BD%95%E5%B0%86jar%E5%8C%85%E5%8F%91%E5%B8%83%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</id>
    <published>2019-06-21T10:00:00.000Z</published>
    <updated>2020-10-22T06:50:57.121Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前在github上开发了一个简单的项目，一直想把这个jar包发布到中央仓库。一直没有时间弄这个，今天抽出点时间，按照网上的例子，操作了一遍，顺便记录一下，一遍将来参考。我的开发环境是ubuntu18.04，maven3，整个过程还是比较顺利的。</p></blockquote><h2 id="注册JIRA账号"><a href="#注册JIRA账号" class="headerlink" title="注册JIRA账号"></a>注册JIRA账号</h2><p>打开<a href="https://issues.sonatype.org/secure/Dashboard.jspa">https://issues.sonatype.org/secure/Dashboard.jspa</a> ，用邮箱注册即可。</p><h2 id="创建issue"><a href="#创建issue" class="headerlink" title="创建issue"></a>创建issue</h2><p>需要填写group id项目地址之类的，页面都有示例提示。</p><h2 id="等待审核"><a href="#等待审核" class="headerlink" title="等待审核"></a>等待审核</h2><p>提交的issue需要人工审核，审核之后，issue的状态变为：RESOLVED，到了这一步就可以上传jar包了。</p><h2 id="配置maven-Setting-xml文件"><a href="#配置maven-Setting-xml文件" class="headerlink" title="配置maven Setting.xml文件"></a>配置maven Setting.xml文件</h2><p>maven的Setting.xml文件可以在安装路径的conf目录下，也可以只修改当前用户<code>.m</code>目录下，如果你的电脑是多账户共享的话。在Settings.xml文件中，找到<code>&lt;servers&gt;</code>标签，然后在标签中增加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;自行替换&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;username&gt;替换成自己的JIRA账号&lt;&#x2F;username&gt;</span><br><span class="line">    &lt;password&gt;替换成自己的JIRA账号密码&lt;&#x2F;password&gt;</span><br><span class="line">&lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure><p>id一般写oss就行。需要和pom文件中保持一致。</p><h2 id="修改pom文件"><a href="#修改pom文件" class="headerlink" title="修改pom文件"></a>修改pom文件</h2><p>我这次发布的pom文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.sonatype.oss&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;oss-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;7&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;licenses&gt;</span><br><span class="line">        &lt;license&gt;</span><br><span class="line">            &lt;name&gt;The Apache Software License, Version 2.0&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0.txt&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;distribution&gt;repo&lt;&#x2F;distribution&gt;</span><br><span class="line">        &lt;&#x2F;license&gt;</span><br><span class="line">    &lt;&#x2F;licenses&gt;</span><br><span class="line">    &lt;scm&gt;</span><br><span class="line">        &lt;url&gt;https:&#x2F;&#x2F;github.com&#x2F;heqiao2010&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;connection&gt;https:&#x2F;&#x2F;github.com&#x2F;heqiao2010&#x2F;LunarCalendar.git&lt;&#x2F;connection&gt;</span><br><span class="line">    &lt;&#x2F;scm&gt;</span><br><span class="line">    &lt;developers&gt;</span><br><span class="line">        &lt;developer&gt;</span><br><span class="line">            &lt;name&gt;Joel Herb&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;email&gt;he_qiao_2010@yeah.net&lt;&#x2F;email&gt;</span><br><span class="line">            &lt;organization&gt;heqiao2010&lt;&#x2F;organization&gt;</span><br><span class="line">        &lt;&#x2F;developer&gt;</span><br><span class="line">    &lt;&#x2F;developers&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.github.heqiao2010&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lunar&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;LunarCalendar&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;A Java implementation of Chinese lunar calendar. &lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.8.5&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;httpclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.5.7&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;release&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;build&gt;</span><br><span class="line">                &lt;plugins&gt;</span><br><span class="line">                    &lt;!-- Source --&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;maven-source-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                        &lt;version&gt;2.2.1&lt;&#x2F;version&gt;</span><br><span class="line">                        &lt;executions&gt;</span><br><span class="line">                            &lt;execution&gt;</span><br><span class="line">                                &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">                                &lt;goals&gt;</span><br><span class="line">                                    &lt;goal&gt;jar-no-fork&lt;&#x2F;goal&gt;</span><br><span class="line">                                &lt;&#x2F;goals&gt;</span><br><span class="line">                            &lt;&#x2F;execution&gt;</span><br><span class="line">                        &lt;&#x2F;executions&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">                    &lt;!-- Javadoc --&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;maven-javadoc-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                        &lt;version&gt;2.9.1&lt;&#x2F;version&gt;</span><br><span class="line">                        &lt;executions&gt;</span><br><span class="line">                            &lt;execution&gt;</span><br><span class="line">                                &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">                                &lt;goals&gt;</span><br><span class="line">                                    &lt;goal&gt;jar&lt;&#x2F;goal&gt;</span><br><span class="line">                                &lt;&#x2F;goals&gt;</span><br><span class="line">                            &lt;&#x2F;execution&gt;</span><br><span class="line">                        &lt;&#x2F;executions&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">                    &lt;!-- GPG --&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                        &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;maven-gpg-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                        &lt;version&gt;1.6&lt;&#x2F;version&gt;</span><br><span class="line">                        &lt;executions&gt;</span><br><span class="line">                            &lt;execution&gt;</span><br><span class="line">                                &lt;phase&gt;verify&lt;&#x2F;phase&gt;</span><br><span class="line">                                &lt;goals&gt;</span><br><span class="line">                                    &lt;goal&gt;sign&lt;&#x2F;goal&gt;</span><br><span class="line">                                &lt;&#x2F;goals&gt;</span><br><span class="line">                            &lt;&#x2F;execution&gt;</span><br><span class="line">                        &lt;&#x2F;executions&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;&#x2F;plugins&gt;</span><br><span class="line">            &lt;&#x2F;build&gt;</span><br><span class="line">            &lt;distributionManagement&gt;</span><br><span class="line">                &lt;snapshotRepository&gt;</span><br><span class="line">                    &lt;id&gt;oss&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;url&gt;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;snapshots&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                &lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                    &lt;id&gt;oss&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;url&gt;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;service&#x2F;local&#x2F;staging&#x2F;deploy&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                &lt;&#x2F;repository&gt;</span><br><span class="line">            &lt;&#x2F;distributionManagement&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line">    &lt;&#x2F;profiles&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><h2 id="生成并上传密钥"><a href="#生成并上传密钥" class="headerlink" title="生成并上传密钥"></a>生成并上传密钥</h2><p>运行如下命令，根据提示生成密钥，需要设置pharse。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>生成的密钥类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gpg --list-keys </span><br><span class="line">&#x2F;home&#x2F;qiaohe&#x2F;.gnupg&#x2F;pubring.gpg</span><br><span class="line">-------------------------------</span><br><span class="line">pub   rsa3072 2019-06-21 [SC] [有效至：2021-06-20]</span><br><span class="line">      812FAC0448CBA6C3E8EA8EA67BA82CF4A21310B2</span><br><span class="line">uid           [ 绝对 ] Joel Herb &lt;he_qiao_2010@yeah.net&gt;</span><br><span class="line">sub   rsa3072 2019-06-21 [E] [有效至：2021-06-20]</span><br></pre></td></tr></table></figure><p>然后上传密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp:&#x2F;&#x2F;keyserver.ubuntu.com:11371 --send-keys 812FAC0448CBA6C3E8EA8EA67BA82CF4A21310B2</span><br></pre></td></tr></table></figure><h2 id="执行部署"><a href="#执行部署" class="headerlink" title="执行部署"></a>执行部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -P release</span><br></pre></td></tr></table></figure><p>-P命令用于指定pom文件中profile的id。在编译之后，上传到中央服务器的时候，系统会提示让你输入密钥中的phrase，如果是windows系统可以在编译命令后加上<code>-Dgpg.passphrase=设置的pharse</code></p><p>上传完成之后在<a href="https://oss.sonatype.org/">https://oss.sonatype.org</a> （登陆账号和新建issue的账号一致）这个页面的staging repositories页签中可以看到刚才上传的内容，默认是open状态的，先点击上方的close然后再点击release即可。注意relesea版本的jar中的版本号不能带SNAPSHOT字样，因为SNAPSHOT版本是不稳定版，不应该release，否则会有歧义，容易引起误解。</p><h2 id="通知管理员"><a href="#通知管理员" class="headerlink" title="通知管理员"></a>通知管理员</h2><p>在之前创建的issue下，评论通知管理员，已经上传jar包了。等管理员操作之后，在中央仓库就可以看到上传的jar包了。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.github.heqiao2010&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lunar&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/ljbmxsm/article/details/78009268">https://blog.csdn.net/ljbmxsm/article/details/78009268</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前在github上开发了一个简单的项目，一直想把这个jar包发布到中央仓库。一直没有时间弄这个，今天抽出点时间，按照网上的例子，操作了一遍，顺便记录一下，一遍将来参考。我的开发环境是ubuntu18.04，maven3，整个过程还是比较顺利的。&lt;</summary>
      
    
    
    
    <category term="git" scheme="http://heqiao2010.github.io/categories/git/"/>
    
    
    <category term="Maven" scheme="http://heqiao2010.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Freemarker中如何避免xss漏洞</title>
    <link href="http://heqiao2010.github.io/2019/06/20/Freemarker%E4%B8%AD%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dxss%E6%BC%8F%E6%B4%9E/"/>
    <id>http://heqiao2010.github.io/2019/06/20/Freemarker%E4%B8%AD%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dxss%E6%BC%8F%E6%B4%9E/</id>
    <published>2019-06-20T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是XSS漏洞"><a href="#什么是XSS漏洞" class="headerlink" title="什么是XSS漏洞"></a>什么是XSS漏洞</h2><p>试想一下，如果我们开发一个订单系统，订单名称如果没有做限制，允许用户输入任意字符，那么就有产生XSS的危险。攻击者可以很容易编写一个恶意JS脚本,然后将当前登录用户的cookie或者其他敏感信息抓取到，发送给攻击者自己，这就是XSS（跨站脚本）攻击。如何解决这个问题，首先我们想到的是在用户输入订单的时候，我们对订单名称做限制，不允许输入特殊字符。这样是可以避免的，不过对于一个大的系统来说，用户可以输入的字段太多了，如果能够全部校验，是最好的。如果不能做的话，还可以让前端在做展示的时候进行html转义处理一下，这样原本scirpt标签以及当中的内容就被当做一个字符串展示出来，而不是当做代码执行了。一般现在的reactjs等前端框架已经默认支持防xss了。今天我遇到的问题是，有一部分freemarker写的页面存在XSS的问题。</p><h2 id="FreeMarker中解决XSS"><a href="#FreeMarker中解决XSS" class="headerlink" title="FreeMarker中解决XSS"></a>FreeMarker中解决XSS</h2><p>可以通过对用户输入的字段进行html转义，来有效的避免XSS问题。freemarker模板中的变量通过${value}这样的形式引入，但是挨个修改成<code>$&#123;value?html&#125;</code>的形式未免工作量太大；查阅官方文档，通过escape标签可以对整个模板中$号引入的变量全部进行一次html转义。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;#assign x &#x3D; &quot;&lt;test&gt;&quot;&gt;</span><br><span class="line">&lt;#macro m1&gt;</span><br><span class="line">  m1: $&#123;x&#125;</span><br><span class="line">&lt;&#x2F;#macro&gt;</span><br><span class="line">&lt;#escape x as x?html&gt;</span><br><span class="line">  &lt;#macro m2&gt;m2: $&#123;x&#125;&lt;&#x2F;#macro&gt;</span><br><span class="line">  $&#123;x&#125;</span><br><span class="line">  &lt;@m1&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;#escape&gt;</span><br><span class="line">$&#123;x&#125;</span><br><span class="line">&lt;@m2&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;test&gt;</span><br><span class="line">  m1: &lt;test&gt;</span><br><span class="line">&lt;test&gt;</span><br><span class="line">m2: &lt;test&gt;</span><br></pre></td></tr></table></figure><p>这种方式完全满足现在的改造需求。在这个项目中，freemarker模板是存储在数据库中，所有用到freemarker渲染的地方均是用的同一个入口；这样工作量就不大了。我们知道，freemarker加载模板是通过TemplateLoader这个接口来实现的；只需要在加载模板的时候在模板的头部加上<code>&lt;#escape x as x?html&gt;</code>在尾部加上<code>&lt;/#escape</code>就可以对模板中所有的变量进行html转义了。通过这种方式数据库中的数据也不用修改，将来生成模板，也不需要考虑做html转义的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public interface TemplateLoader &#123;</span><br><span class="line"></span><br><span class="line">    public Object findTemplateSource(String name)</span><br><span class="line">    throws IOException;</span><br><span class="line"></span><br><span class="line">    public long getLastModified(Object templateSource);</span><br><span class="line">  </span><br><span class="line">    public Reader getReader(Object templateSource, String encoding) throws IOException;</span><br><span class="line"> </span><br><span class="line">    public void closeTemplateSource(Object templateSource) throws IOException;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于实现逻辑还是从外部读取字符串加载，所以TemplateLoader接口支持html转义的实现和StringTemplateLoader的逻辑差不多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">public class HtmlEscapeTemplateLoader implements TemplateLoader &#123;</span><br><span class="line"></span><br><span class="line">    private static final String HTML_ESCAPE_PREFIX &#x3D; &quot;&lt;#escape x as x?html&gt;&quot;;</span><br><span class="line">    private static final String HTML_ESCAPE_SUFFIX &#x3D; &quot;&lt;&#x2F;#escape&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 为了支持并发，这里采用ConcurrentMap</span><br><span class="line">    private final Map&lt;String, StringTemplateSource&gt; templates &#x3D; Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    public void putTemplate(String name, String templateContent) &#123;</span><br><span class="line">        putTemplate(name, templateContent, System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void putTemplate(String name, String templateContent, long lastModified) &#123;</span><br><span class="line">        templates.put(name, new HtmlEscapeTemplateLoader.StringTemplateSource(name, templateContent, lastModified));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean removeTemplate(String name) &#123;</span><br><span class="line">        return templates.remove(name) !&#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void closeTemplateSource(Object templateSource) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object findTemplateSource(String name) &#123;</span><br><span class="line">        return templates.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public long getLastModified(Object templateSource) &#123;</span><br><span class="line">        return ((HtmlEscapeTemplateLoader.StringTemplateSource) templateSource).lastModified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Reader getReader(Object templateSource, String encoding) throws IOException &#123;</span><br><span class="line">        Reader reader &#x3D; new StringReader(((StringTemplateSource) templateSource).templateContent);</span><br><span class="line">        String templateText &#x3D; IOUtils.toString(reader);</span><br><span class="line">        return new StringReader(HTML_ESCAPE_PREFIX + templateText + HTML_ESCAPE_SUFFIX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class StringTemplateSource &#123;</span><br><span class="line">        private final String name;</span><br><span class="line">        private final String templateContent;</span><br><span class="line">        private final long lastModified;</span><br><span class="line"></span><br><span class="line">        StringTemplateSource(String name, String templateContent, long lastModified) &#123;</span><br><span class="line">            if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;name &#x3D;&#x3D; null&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (templateContent &#x3D;&#x3D; null) &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;source &#x3D;&#x3D; null&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (lastModified &lt; -1L) &#123;</span><br><span class="line">                throw new IllegalArgumentException(&quot;lastModified &lt; -1L&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            this.name &#x3D; name;</span><br><span class="line">            this.templateContent &#x3D; templateContent;</span><br><span class="line">            this.lastModified &#x3D; lastModified;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int hashCode() &#123;</span><br><span class="line">            final int prime &#x3D; 31;</span><br><span class="line">            int result &#x3D; 1;</span><br><span class="line">            result &#x3D; prime * result + ((name &#x3D;&#x3D; null) ? 0 : name.hashCode());</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean equals(Object obj) &#123;</span><br><span class="line">            if (this &#x3D;&#x3D; obj)</span><br><span class="line">                return true;</span><br><span class="line">            if (obj &#x3D;&#x3D; null)</span><br><span class="line">                return false;</span><br><span class="line">            if (getClass() !&#x3D; obj.getClass())</span><br><span class="line">                return false;</span><br><span class="line">            HtmlEscapeTemplateLoader.StringTemplateSource other &#x3D; (HtmlEscapeTemplateLoader.StringTemplateSource) obj;</span><br><span class="line">            if (name &#x3D;&#x3D; null) &#123;</span><br><span class="line">                if (other.name !&#x3D; null)</span><br><span class="line">                    return false;</span><br><span class="line">            &#125; else if (!name.equals(other.name))</span><br><span class="line">                return false;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Show class name and some details that are useful in template-not-found errors.</span><br><span class="line">     *</span><br><span class="line">     * @since 2.3.21</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        sb.append(getClassNameForToString(this));</span><br><span class="line">        sb.append(&quot;(Map &#123; &quot;);</span><br><span class="line">        int cnt &#x3D; 0;</span><br><span class="line">        for (String name : templates.keySet()) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            if (cnt !&#x3D; 1) &#123;</span><br><span class="line">                sb.append(&quot;, &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (cnt &gt; 10) &#123;</span><br><span class="line">                sb.append(&quot;...&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(StringUtil.jQuote(name));</span><br><span class="line">            sb.append(&quot;&#x3D;...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (cnt !&#x3D; 0) &#123;</span><br><span class="line">            sb.append(&#39; &#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(&quot;&#125;)&quot;);</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String getClassNameForToString(TemplateLoader templateLoader) &#123;</span><br><span class="line">        final Class tlClass &#x3D; templateLoader.getClass();</span><br><span class="line">        final Package tlPackage &#x3D; tlClass.getPackage();</span><br><span class="line">        return tlPackage &#x3D;&#x3D; Configuration.class.getPackage() || tlPackage &#x3D;&#x3D; TemplateLoader.class.getPackage()</span><br><span class="line">                ? tlClass.getSimpleName() : tlClass.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此实现了在freemarker中自动进行html转义避免XSS问题的过程。参考网上有些资料可以修改freemarker的源码，对其在进行<code>$</code>号解析的时候，自动加上html转义的逻辑，也是可以的。如果某些特殊情况下，就是需要展示html形式的内容而不需要转义，或者有人错误的将变量进行了一次转义比如写成<code>$&#123;!(value)?html&#125;</code>的形式，会怎样？</p><p>如果就是需要展示html形式的内容而不需要转义，可以用<code>&lt;#noescape&gt;</code>标签将不需要转义的变量包裹起来，这样就算外层有<code>&lt;#escape&gt;</code>也不会进行转义了。如果在外部有<code>&lt;#escape&gt;</code>的情况下，变量自身又做了一次转义，那么该变量会被转义两次。正常字符不会有影响，含有特殊字符的话，可能比较难看了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/shadowsick/article/details/80768868">https://blog.csdn.net/shadowsick/article/details/80768868</a><br><a href="https://my.oschina.net/greki/blog/83246?p=1">https://my.oschina.net/greki/blog/83246?p=1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是XSS漏洞&quot;&gt;&lt;a href=&quot;#什么是XSS漏洞&quot; class=&quot;headerlink&quot; title=&quot;什么是XSS漏洞&quot;&gt;&lt;/a&gt;什么是XSS漏洞&lt;/h2&gt;&lt;p&gt;试想一下，如果我们开发一个订单系统，订单名称如果没有做限制，允许用户输入任意字符，那么就有产</summary>
      
    
    
    
    <category term="Freemarker" scheme="http://heqiao2010.github.io/categories/Freemarker/"/>
    
    
    <category term="Freemarker" scheme="http://heqiao2010.github.io/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox虚拟机和宿主机实现网络互通配置</title>
    <link href="http://heqiao2010.github.io/2019/06/19/VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A%E9%85%8D%E7%BD%AE/"/>
    <id>http://heqiao2010.github.io/2019/06/19/VirtualBox%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E5%AE%BF%E4%B8%BB%E6%9C%BA%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%BB%9C%E4%BA%92%E9%80%9A%E9%85%8D%E7%BD%AE/</id>
    <published>2019-06-19T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于想要在本地测试一下syslog以及安装jenkins等需求，所以想在本地安装一个虚拟机，并且能够在宿主机上访问，所以想利于virtualbox上安装一个linux来实现，尝试了几次，其实配置挺简单的，这里记录一下。</p></blockquote><h2 id="接入方式对比"><a href="#接入方式对比" class="headerlink" title="接入方式对比"></a>接入方式对比</h2><p>VirtualBox的提供了四种网络接入模式</p><ol><li>NAT 网络地址转换模式(NAT,Network Address Translation) ：<br>宿主机做nat转换，对外外部网络来说，虚拟机是不可见的，因为宿主机代理了虚拟机的所有请求。</li><li>Bridged Adapter 桥接模式 ：<br>对于虚拟机，外部网络可见，虚拟机和宿主机存在于同一个网段。</li><li>Internal 内部网络模式 ：创建一个隔离的虚拟网络，在这个网络中的虚拟机之间可以相互访问，虚拟机不能访问外部网络，外部网络也不能访问内部虚拟机。</li><li>Host-only Adapter 主机模式 ：　也可以通过配置实现，下次有机会再看看。</li></ol><p>各个接入方式对比：</p><table><thead><tr><th></th><th align="center">NAT</th><th>Bridged</th><th>Internal</th><th align="right">Host-only</th></tr></thead><tbody><tr><td>虚拟机－&gt;宿主机</td><td align="center">√</td><td>√</td><td>×</td><td align="right">默认不能，需设置</td></tr><tr><td>宿主机－&gt;虚拟机</td><td align="center">×</td><td>√</td><td>×</td><td align="right">默认不能，需设置</td></tr><tr><td>虚拟机－&gt;其他主机</td><td align="center">√</td><td>√</td><td>×</td><td align="right">默认不能，需设置</td></tr><tr><td>其他主机－&gt;宿主机</td><td align="center">×</td><td>√</td><td>×</td><td align="right">默认不能，需设置</td></tr><tr><td>虚拟机之间</td><td align="center">×</td><td>√</td><td>同网络名下可以</td><td align="right">√</td></tr></tbody></table><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>从对比中可以看出桥接方式是最优的方案，但是配置之后，宿主机和虚拟机之间能够互通，但是在虚拟机中不能上外网了，因为配置的宿主机DNS不能解析外部域名，而虚拟机中也无法ping通诸如114.114.114.114的地址。</p><p>如果做NAT的话，虚拟机是可以访问外网的，所以可以给虚拟机设置两个网卡。一个做桥接一个做NAT就达到目的了。</p><p><img src="https://raw.githubusercontent.com/heqiao2010/heqiao2010.github.io/master/img/2019/virtualbox-netconfig.png"></p><p>需要注意的是桥接网卡在虚拟机中需要手动配置一个和宿主机同网段的IP，网关和DNS最好和宿主机配置一致。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/chaishen10000/article/details/82984811">https://blog.csdn.net/chaishen10000/article/details/82984811</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;由于想要在本地测试一下syslog以及安装jenkins等需求，所以想在本地安装一个虚拟机，并且能够在宿主机上访问，所以想利于virtualbox上安装一个linux来实现，尝试了几次，其实配置挺简单的，这里记录一下。&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="虚拟机" scheme="http://heqiao2010.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="VirtualBox" scheme="http://heqiao2010.github.io/tags/VirtualBox/"/>
    
  </entry>
  
  <entry>
    <title>记一次重写RequestMappingHandlerMapping的经历</title>
    <link href="http://heqiao2010.github.io/2019/06/17/%E4%B8%80%E6%AC%A1%E9%87%8D%E5%86%99RequestMappingHandlerMapping%E7%9A%84%E7%BB%8F%E5%8E%86/"/>
    <id>http://heqiao2010.github.io/2019/06/17/%E4%B8%80%E6%AC%A1%E9%87%8D%E5%86%99RequestMappingHandlerMapping%E7%9A%84%E7%BB%8F%E5%8E%86/</id>
    <published>2019-06-17T10:00:00.000Z</published>
    <updated>2020-10-22T06:46:02.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近期公司的产品做了一次安全审查，发现后端提供的接口有<strong>不安全的Http方法</strong>漏洞。不安全的HTTP方法一般包括：TRACE、PUT、DELETE、COPY 等。其中最常见的为TRACE方法可以回显服务器收到的请求，主要用于测试或诊断，恶意攻击者可以利用该方法进行跨站跟踪攻击（即XST攻击），从而进行网站钓鱼、盗取管理员cookie等。</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>引起这个问题的原因其实很简单，因为开发人员开发接口的时候偷懒没有指定RequestMapping中的method属性导致的。没有指定method则系统会默认支持除了TRACE之外的其他７中方式，所以，这就是我要重写的RequestMappingHandlerMapping原因。</p><p>当然还有其他的方式，比如搜索出所有采用RequestMapping而没有指定method的地方，然后在代码中明确指定method。这种方式思路最简单，但是毕竟人是懒惰的。而且将来代码开发中如果任然有人不指定method，那么这个问题任然会存在。所以我们需要改动一下，框架加载http接口映射关系的逻辑：</p><p>在没有指定method的情况下，只支持GET和POST；在明确指定method的情况下，保留指定的method。</p><h2 id="为什么重写的是RequestMappingHandlerMapping"><a href="#为什么重写的是RequestMappingHandlerMapping" class="headerlink" title="为什么重写的是RequestMappingHandlerMapping"></a>为什么重写的是RequestMappingHandlerMapping</h2><p>首先后端提供的Http请求均是通过RestController和RequestMapping(或者衍生的GetMapping/PostMapping等)来实现的。那在接收http请求之后，如何将http请求映射到具体的Controller中的方法上呢？答案在HandlerMapping这个接口。这个具体映射过程细节以后再说，而HandlerMapping接口的映射方法getHandler是在AbstractHandlerMapping中实现的，而AbstractHandlerMapping的一个非抽象子类就是RequestMappingHandlerMapping。</p><h2 id="重写RequestMappingHandlerMapping的哪个方法"><a href="#重写RequestMappingHandlerMapping的哪个方法" class="headerlink" title="重写RequestMappingHandlerMapping的哪个方法"></a>重写RequestMappingHandlerMapping的哪个方法</h2><p>从RequestMappingHandlerMapping中的getMappingForMethod方法可以看出，接口的映射信息，是由两部分组成的。一部分是来自于Controller类上的RequestMapping注解，一部分是来自于方法上的RequestMapping注解。所以，在这个方法中createRequestMappingInfo调用了两次，然后再组合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected RequestMappingInfo getMappingForMethod(Method method, Class&lt;?&gt; handlerType) &#123;</span><br><span class="line">RequestMappingInfo info &#x3D; createRequestMappingInfo(method);</span><br><span class="line">if (info !&#x3D; null) &#123;</span><br><span class="line">RequestMappingInfo typeInfo &#x3D; createRequestMappingInfo(handlerType);</span><br><span class="line">if (typeInfo !&#x3D; null) &#123;</span><br><span class="line">info &#x3D; typeInfo.combine(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正的createRequestMappingInfo有一个代理方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) &#123;</span><br><span class="line">RequestMapping requestMapping &#x3D; AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</span><br><span class="line">RequestCondition&lt;?&gt; condition &#x3D; (element instanceof Class ?</span><br><span class="line">getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</span><br><span class="line">return (requestMapping !&#x3D; null ? createRequestMappingInfo(requestMapping, condition) : null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在createRequestMappingInfo中，找到我们想要改动的地方了。在RequestMappingInfo设置method的时候增加一段自己的逻辑即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected RequestMappingInfo createRequestMappingInfo(</span><br><span class="line">RequestMapping requestMapping, RequestCondition&lt;?&gt; customCondition) &#123;</span><br><span class="line"></span><br><span class="line">return RequestMappingInfo</span><br><span class="line">.paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))</span><br><span class="line">.methods(requestMapping.method())</span><br><span class="line">.params(requestMapping.params())</span><br><span class="line">.headers(requestMapping.headers())</span><br><span class="line">.consumes(requestMapping.consumes())</span><br><span class="line">.produces(requestMapping.produces())</span><br><span class="line">.mappingName(requestMapping.name())</span><br><span class="line">.customCondition(customCondition)</span><br><span class="line">.options(this.config)</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此,可以重写RequestMappingHandlerMapping如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public class HttpSafetyRequestMappingHandlerMapping extends RequestMappingHandlerMapping&#123;</span><br><span class="line"></span><br><span class="line">    private RequestMappingInfo.BuilderConfiguration config &#x3D; new RequestMappingInfo.BuilderConfiguration();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected RequestMappingInfo createRequestMappingInfo(RequestMapping requestMapping,</span><br><span class="line">                                                          RequestCondition&lt;?&gt; customCondition) &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果Controller的方法上RequestMapping没有指定Method，则只支持GET和POST</span><br><span class="line">        RequestMethod[] methods &#x3D; &#123; RequestMethod.GET, RequestMethod.POST &#125;;</span><br><span class="line"></span><br><span class="line">        if(requestMapping.method().length !&#x3D; 0)&#123;</span><br><span class="line">            methods &#x3D; requestMapping.method();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return RequestMappingInfo</span><br><span class="line">                .paths(resolveEmbeddedValuesInPatterns(requestMapping.path()))</span><br><span class="line">                .methods(methods)</span><br><span class="line">                .params(requestMapping.params())</span><br><span class="line">                .headers(requestMapping.headers())</span><br><span class="line">                .consumes(requestMapping.consumes())</span><br><span class="line">                .produces(requestMapping.produces())</span><br><span class="line">                .mappingName(requestMapping.name())</span><br><span class="line">                .customCondition(customCondition)</span><br><span class="line">                .options(config)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected RequestMappingInfo getMappingForMethod(Method method, Class&lt;?&gt; handlerType) &#123;</span><br><span class="line">        RequestMappingInfo info &#x3D; createRequestMappingInfo(method);</span><br><span class="line">        if (info !&#x3D; null) &#123;</span><br><span class="line">            RequestMappingInfo typeInfo &#x3D; createRequestMappingInfo(handlerType);</span><br><span class="line">            if (typeInfo !&#x3D; null) &#123;</span><br><span class="line">                info &#x3D; typeInfo.combine(info);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) &#123;</span><br><span class="line">        RequestMapping requestMapping &#x3D; AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</span><br><span class="line">        RequestCondition&lt;?&gt; condition &#x3D; (element instanceof Class ?</span><br><span class="line">                getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</span><br><span class="line">        if(requestMapping &#x3D;&#x3D; null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 只需要处理方法上的RequestMapping，Controller类上的不需要处理</span><br><span class="line">        if(element instanceof Class)&#123;</span><br><span class="line">            return super.createRequestMappingInfo(requestMapping, condition);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return createRequestMappingInfo(requestMapping, condition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() &#123;</span><br><span class="line">        this.config &#x3D; new RequestMappingInfo.BuilderConfiguration();</span><br><span class="line">        this.config.setUrlPathHelper(getUrlPathHelper());</span><br><span class="line">        this.config.setPathMatcher(getPathMatcher());</span><br><span class="line">        this.config.setSuffixPatternMatch(useSuffixPatternMatch());</span><br><span class="line">        this.config.setTrailingSlashMatch(useTrailingSlashMatch());</span><br><span class="line">        this.config.setRegisteredSuffixPatternMatch(useRegisteredSuffixPatternMatch());</span><br><span class="line">        this.config.setContentNegotiationManager(getContentNegotiationManager());</span><br><span class="line">        super.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何替换"><a href="#如何替换" class="headerlink" title="如何替换"></a>如何替换</h2><p>网关服务采用Spring boot开发，那么我们可以从<code>org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration</code>入手。此类中有一个内部类：EnableWebMvcConfiguration，它继承并重写了createRequestMappingHandlerMapping方法。我们知道，在WebMvcConfigurationSupport类中，RequestMappingHandlerMapping实例的获取是通过其：requestMappingHandlerMapping方法上增加Bean注解来实现的。</p><p>这几个类的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">WebMvcConfigurationSupport</span><br><span class="line">^</span><br><span class="line">| 继承</span><br><span class="line">DelegatingWebMvcConfiguration</span><br><span class="line">^</span><br><span class="line">| 继承</span><br><span class="line">EnableWebMvcConfiguration</span><br><span class="line">^      ^ </span><br><span class="line">|      | @Import</span><br><span class="line">|　WebMvcAutoConfigurationAdapter</span><br><span class="line">|　　　　　　　 ^ 静态内部类</span><br><span class="line">|             |</span><br><span class="line">| 静态内部类　　|</span><br><span class="line">WebMvcAutoConfiguration</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在WebMvcConfigurationSupport的requestMappingHandlerMapping方法中，RequestMappingHanlderMapping是通过调用createRequestMappingHandlerMapping方法来实现的。所以要覆盖RequestMappingHanlderMapping的实现，只需要重写createRequestMappingHandlerMapping即可。而EnableWebMvcConfiguration已经将这个方法重写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      @Override</span><br><span class="line">protected RequestMappingHandlerMapping createRequestMappingHandlerMapping() &#123;</span><br><span class="line">if (this.mvcRegistrations !&#x3D; null</span><br><span class="line">&amp;&amp; this.mvcRegistrations.getRequestMappingHandlerMapping() !&#x3D; null) &#123;</span><br><span class="line">return this.mvcRegistrations.getRequestMappingHandlerMapping();</span><br><span class="line">&#125;</span><br><span class="line">return super.createRequestMappingHandlerMapping();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，EnableWebMvcConfiguration已经提供了替换RequestMappingHandlerMapping的方式，那就是：WebMvcRegistrations。而WebMvcRegistrations是个接口，并有一个默认的空实现：WebMvcRegistrationsAdapter，只需要覆盖其中的getRequestMappingHandlerMapping方法即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class SafetyWebMvcRegistrationsAdapter extends WebMvcRegistrationsAdapter&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public RequestMappingHandlerMapping getRequestMappingHandlerMapping() &#123;</span><br><span class="line">        return new HttpSafetyRequestMappingHandlerMapping();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此Sping boot中替换RequestMappingHandlerMapping的实现就结束了。</p><p>不过我们另一个服务采用的是Spring mvc,上面的替换就不生效了。因为服务中WebApplicationContext是通过@EnableWebMvc注入的配置。而在这个注解中导入的实际上是DelegatingWebMvcConfiguration。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Documented</span><br><span class="line">@Import(DelegatingWebMvcConfiguration.class)</span><br><span class="line">public @interface EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以把@EnableWebMvc替换成@Import(WebMvcAutoConfiguration.EnableWebMvcConfiguration.class)即可。或者重写DelegatingWebMvcConfiguration，覆盖createRequestMappingHandlerMapping方法也是可以的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;近期公司的产品做了一次安全审查，发现后端提供的接口有&lt;strong&gt;不安全的Http方法&lt;/strong&gt;漏洞。不安全的HTTP方法一般包括：TRACE、PUT、DELETE、COPY 等。其中最常见的为TRACE方法可以回显服务器收到的请求，主要</summary>
      
    
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/categories/Spring/"/>
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>如何获取用户真实IP</title>
    <link href="http://heqiao2010.github.io/2019/06/14/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9C%9F%E5%AE%9EIP/"/>
    <id>http://heqiao2010.github.io/2019/06/14/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9C%9F%E5%AE%9EIP/</id>
    <published>2019-06-14T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在web开发过程中，我们经常需要获取用户客户端的真实IP。比如我们想知道客户的地理位置分布；比如服务端需要将会话和IP地址绑定，以提高安全性等。但是一般在分布式系统中，为了提高系统的可靠性和性能，都会采用代理来分发用户的请求，导致获取用户真实IP变得有些麻烦。</p></blockquote><h2 id="获取调用方IP的方法"><a href="#获取调用方IP的方法" class="headerlink" title="获取调用方IP的方法"></a>获取调用方IP的方法</h2><p>直接调用HttpServletRequest中的request.getRemoteAddr()方法，获取的IP地址，是当前服务的上游服务的IP地址，在没有代理的情况下是准确的，不过一般都会有一个或者多个代理，这种方式一般不适用。一般可能用如下几个字段</p><h3 id="X-FORWARDED-FOR"><a href="#X-FORWARDED-FOR" class="headerlink" title="X-FORWARDED-FOR"></a>X-FORWARDED-FOR</h3><p>X-FORWARDED-FOR这个http头是个调试参数，在代理服务器上做相关的配置，能够实现，在经过每一个代理的时候，会往后追加上代理的IP地址；这样通过这个字段就可以知道，这个请求被代理了多少次，每次代理是由那个IP处理的；所以取列表第一个IP就是用户的真实IP地址了。</p><p>nginx支持X-FORWARDED-FOR的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure><h3 id="Proxy-Client-IP"><a href="#Proxy-Client-IP" class="headerlink" title="Proxy-Client-IP"></a>Proxy-Client-IP</h3><p>用apache http做代理时一般会加上Proxy-Client-IP请求头</p><h3 id="WL-Proxy-Client-IP"><a href="#WL-Proxy-Client-IP" class="headerlink" title="WL-Proxy-Client-IP"></a>WL-Proxy-Client-IP</h3><p>weblogic插件加上的头</p><h3 id="HTTP-CLIENT-IP"><a href="#HTTP-CLIENT-IP" class="headerlink" title="HTTP_CLIENT_IP"></a>HTTP_CLIENT_IP</h3><p>有些代理服务器会加上此请求头。</p><h3 id="X-Real-IP"><a href="#X-Real-IP" class="headerlink" title="X-Real-IP"></a>X-Real-IP</h3><p>在nginx中可以把上游调用的真实IP加到HTTP请求头中，这个IP从remote_addr变量中获取是从TCP链接中获取的真实IP。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br></pre></td></tr></table></figure><h2 id="某些特殊情况"><a href="#某些特殊情况" class="headerlink" title="某些特殊情况"></a>某些特殊情况</h2><p>正常我们会按照上面的顺序按照优先级获取真实的IP地址。网上一般都会把X-FORWARDED-FOR这个参数作为第一优先级来处理。但是这个参数实际上是不安全的。<br>X-FORWARDED-FOR这个参数的值是个列表，每次经过代理都是往后追加，而不是覆盖的。所以不能确保IP是可信的。客户端可以先伪造一个IP放到头部，真实IP就会在伪造IP之后了。比如：</p><p>客户端伪造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-FORWARDED-FOR：　1.1.1.1</span><br></pre></td></tr></table></figure><p>经过两次代理（192.168.1.2,192.168.1.3）之后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-FORWARDED-FOR：　1.1.1.1,108.10.10.123,192.168.1.2,192.168.1.3</span><br></pre></td></tr></table></figure><p>这样获取到的IP地址是1.1.1.1，而不是真正的108.10.10.123。其实真实IP已经在列表中了，怎么避免获取伪造的IP？</p><p>nginx有个realip模块，可以通过set_real_ip_from命令制定代理服务器的IP,因为代理服务器的IP地址都是已知的，所以可以通过从右至左依次获取第一个不在代理IP列表中的合法IP就是用户真实IP地址了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set_real_ip_from  192.168.1.2;</span><br><span class="line">set_real_ip_from  192.168.1.3;</span><br><span class="line">real_ip_header    X-Forwarded-For;</span><br><span class="line">real_ip_recursive on;</span><br></pre></td></tr></table></figure><p>安装realip模块需要重新编译nginx，比较麻烦，也可以直接通过最上层代理（第一层代理）服务器获取用户真实IP，写入http头部，后端服务优先获取此参数即可。比如：第一层代理是nginx,将remote_addr参数写入X-Real-IP，后端优先获取此参数，其他代理不要覆盖此参数即可；由于参数是覆盖写入的，就算客户端伪造一个X-Real-IP参数头，也会被代理服务器复写为真实的IP.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/1e0124de8e02">https://www.jianshu.com/p/1e0124de8e02</a><br><a href="http://nginx.org/en/docs/http/ngx_http_realip_module.html">http://nginx.org/en/docs/http/ngx_http_realip_module.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在web开发过程中，我们经常需要获取用户客户端的真实IP。比如我们想知道客户的地理位置分布；比如服务端需要将会话和IP地址绑定，以提高安全性等。但是一般在分布式系统中，为了提高系统的可靠性和性能，都会采用代理来分发用户的请求，导致获取用户真实IP变</summary>
      
    
    
    
    <category term="服务端" scheme="http://heqiao2010.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="服务端" scheme="http://heqiao2010.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git技巧之git stash</title>
    <link href="http://heqiao2010.github.io/2019/06/13/git%E6%8A%80%E5%B7%A7%E4%B9%8Bgitstash/"/>
    <id>http://heqiao2010.github.io/2019/06/13/git%E6%8A%80%E5%B7%A7%E4%B9%8Bgitstash/</id>
    <published>2019-06-13T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>英文单词：stash的原意是储藏的意思。当我们在开发过程中，代码写了一部分，由于某种原因需要切换到另一个分支上，比如临时需要切换到另一个需求上开发另一个任务，这个时候就我们就需要某种手段临时保存手头上没有完成的任务，在另一个任务做完了之后，再恢复这个没有完成的任务继续开发。这个过程是不是有点类似，操作系统中发生函数调用时，保存现场和恢复现场？</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li><p>创建存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>运行这个命令之后，会将当前所有的修改存储起来，再次运行git statu,会发现目录恢复成clean的状态了。这个时候就可以切换到其他分支了。</p></li><li><p>查看存储列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>有时候，我们运行了stash多次，通过上面的命令，可以查看每次存储的记录；类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 049d078 added the index file</span><br><span class="line">stash@&#123;1&#125;: WIP on master: c264051 Revert &quot;added file_size&quot;</span><br><span class="line">stash@&#123;2&#125;: WIP on master: 21d80a5 added number to log</span><br></pre></td></tr></table></figure></li><li><p>恢复存储</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash apply #应用存储</span><br><span class="line">git stash pop　 #应用并删除存储</span><br><span class="line">git stash drop　＃删除存储</span><br></pre></td></tr></table></figure><p>上面的命令默认对最近一次的存储进行操作，如果需要制定那个存储，可以在明后跟上存储的名称，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;2&#125;</span><br></pre></td></tr></table></figure><p>##从储藏中创建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash branch [分支名]</span><br></pre></td></tr></table></figure><p>有时候想要对于暂存的代码新创建一个分支，可以用上面的命令进行；一般这种情况可能是应用存储时发生冲突，或者是想要创建分支进行其他操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89">https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;p&gt;英文单词：stash的原意是储藏的意思。当我们在开发过程中，代码写了一部分，由于某种原因需要切换到另一个分支上，比如临时需要切换到另一个需求</summary>
      
    
    
    
    <category term="git" scheme="http://heqiao2010.github.io/categories/git/"/>
    
    
    <category term="git" scheme="http://heqiao2010.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Syslog基础</title>
    <link href="http://heqiao2010.github.io/2019/06/10/Syslog%E5%9F%BA%E7%A1%80/"/>
    <id>http://heqiao2010.github.io/2019/06/10/Syslog%E5%9F%BA%E7%A1%80/</id>
    <published>2019-06-10T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Syslog基础"><a href="#Syslog基础" class="headerlink" title="Syslog基础"></a>Syslog基础</h1><p>Syslog是类Unix操作系统中，用于记录系统日志（产生自本地或者远程操作系统）到本地磁盘的一套日志格式以及对应的程序。完整的syslog日志中包含产生日志的程序模块（Facility）、严重性（Severity或 Level）、时间、主机名或IP、进程名、进程ID和正文。</p><h1 id="Syslog日志格式"><a href="#Syslog日志格式" class="headerlink" title="Syslog日志格式"></a>Syslog日志格式</h1><p>Syslog日志格式比较松散，一般分为PRI，HEADER以及MSG三个部分，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;30&gt;Oct 9 22:33:20 hlfedora auditd[1787]: The audit daemon is exiting.</span><br></pre></td></tr></table></figure><h2 id="PRI部分"><a href="#PRI部分" class="headerlink" title="PRI部分"></a>PRI部分</h2><p>PRI部分由尖括号包含的一个数字构成，这个数字包含了程序模块（Facility）、严重性（Severity），这个数字是由Facility乘以 8，然后加上Severity得来。也就是说这个数字如果换成2进制的话，低位的3个bit表示Severity，剩下的高位的部分右移3位，就是表示Facility的值。Facility的定义如下：</p><p>|Numerical Code |         Facility|<br>-|-|-<br>|           0   |         kernel messages|<br>|           1   |         user-level messages|<br>|           2   |         mail system|<br>|           3   |         system daemons|<br>|           4   |         security/authorization messages (note 1)|<br>|           5   |         messages generated internally by syslogd|<br>|           6   |         line printer subsystem|<br>|           7   |         network news subsystem|<br>|           8   |         UUCP subsystem|<br>|           9   |         clock daemon (note 2)|<br>|          10   |         security/authorization messages (note 1)|<br>|          11   |         FTP daemon|<br>|          12   |         NTP subsystem|<br>|          13   |         log audit (note 1)|<br>|          14   |         log alert (note 1)|<br>|          15   |         clock daemon (note 2)|<br>|          16   |         local use 0  (local0)|<br>|          17   |         local use 1  (local1)|<br>|          18   |         local use 2  (local2)|<br>|          19   |         local use 3  (local3)|<br>|          20   |         local use 4  (local4)|<br>|          21   |         local use 5  (local5)|<br>|          22   |         local use 6  (local6)|<br>|          23   |         local use 7  (local7)|</p><p>Severity的定义：</p><p>|Numerical  Code |      Severity|<br>-|-|-<br>|           0    |   Emergency: system is unusable|<br>|           1    |   Alert: action must be taken immediately|<br>|           2    |   Critical: critical conditions|<br>|           3    |   Error: error conditions|<br>|           4    |   Warning: warning conditions|<br>|           5    |   Notice: normal but significant condition|<br>|           6    |   Informational: informational messages|<br>|           7    |   Debug: debug-level messages|</p><h2 id="HEADER部分"><a href="#HEADER部分" class="headerlink" title="HEADER部分"></a>HEADER部分</h2><p>HEADER部分包括两个字段，时间和主机名（或IP）。<br>时间紧跟在PRI后面，中间没有空格，格式必须是“Mmm dd hh:mm:ss”，不包括年份。“日”的数字如果是1～9，前面会补一个空格（也就是月份后面有两个空格），而“小时”、“分”、“秒”则在前面补“0”。月份取值包括：Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec；时间后边跟一个空格，然后是主机名或者IP地址，主机名不得包括域名部分。</p><h2 id="MSG部分"><a href="#MSG部分" class="headerlink" title="MSG部分"></a>MSG部分</h2><p>MSG部分又分为两个部分，TAG和Content。其中TAG部分是可选的。在前面的例子中（“&lt;30&gt;Oct 9 22:33:20 hlfedora auditd[1787]: The audit daemon is exiting.”），“auditd[1787]”是TAG部分，包含了进程名称和进程PID。PID可以没有，这个时候中括号也是没有的。进程PID有时甚至不是一个数字，例如“root-1787”，解析程序要做好容错准备。TAG后面用一个冒号隔开Content部分，这部分的内容是应用程序自定义的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/skyofbitbit/p/3674664.html">https://www.cnblogs.com/skyofbitbit/p/3674664.html</a></p><p><a href="http://www.ietf.org/rfc/rfc3164.txt">http://www.ietf.org/rfc/rfc3164.txt</a></p><p><a href="http://www.ietf.org/rfc/rfc3195.txt">http://www.ietf.org/rfc/rfc3195.txt</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Syslog基础&quot;&gt;&lt;a href=&quot;#Syslog基础&quot; class=&quot;headerlink&quot; title=&quot;Syslog基础&quot;&gt;&lt;/a&gt;Syslog基础&lt;/h1&gt;&lt;p&gt;Syslog是类Unix操作系统中，用于记录系统日志（产生自本地或者远程操作系统）到本地磁盘</summary>
      
    
    
    
    <category term="syslog" scheme="http://heqiao2010.github.io/categories/syslog/"/>
    
    
    <category term="linux" scheme="http://heqiao2010.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Swagger</title>
    <link href="http://heqiao2010.github.io/2019/06/06/Swagger/"/>
    <id>http://heqiao2010.github.io/2019/06/06/Swagger/</id>
    <published>2019-06-06T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swagger使用说明"><a href="#Swagger使用说明" class="headerlink" title="Swagger使用说明"></a>Swagger使用说明</h2><h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><p>Swagger是一套治理API的工具，根据OAS（Open Api Specification）这个描述API的规则，实现API盘点、测试以及归档等功能。目前在wisteria功能中，可以在嵌入很少的侵入代码的情况下实现API的盘点功能——我们可以获取到一个最新的，随时和代码保持同步的API文档。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>引入工程依赖</p><p> compile “io.springfox:springfox-swagger2:2.9.2”</p></li><li><p>添加API文档支持</p></li></ol><p>在项目中，采用开开源的springfox支持API信息的采集。 </p><p>(1)非Spring MVC项目(可以跳过该步骤)</p><p>(2)Spring MVC项目</p><p>需要在MvcConfig中增加<code>@EnableSwagger2</code>注解，同时注入Bean<code>Docket</code>即可。</p><pre><code>@Configuration@EnableSwagger2@ComponentScan(basePackages = &quot;com.xxx.frontend&quot;,    nameGenerator = FullBeanNameGenerator.class)@EnableWebMvc@EnableAspectJAutoProxy(proxyTargetClass = true)public class MvcConfig extends WebMvcConfigurerAdapter&#123;    @Bean    public Docket apiDocket() &#123;        return new Docket(DocumentationType.SWAGGER_2)                .enable(swaggerStatus)                .apiInfo(createDefaultApiInfo())                .groupName(appName + &quot;frontend&quot;)                .select()                .apis(RequestHandlerSelectors.basePackage(&quot;com.xxx&quot;))                .paths(PathSelectors.any())                .build();    &#125;    private ApiInfo createDefaultApiInfo()&#123;        return new ApiInfoBuilder()                .title(appName)                .description(appName + &quot; frontend api 文档&quot;)                .termsOfServiceUrl(&quot;http://www.xxx.cn&quot;)                .build();    &#125;&#125;</code></pre><p>(3)添加API描述</p><p>Springfox定义了一系列的注解，用于更好的描述各个API的内容，包括输入输出以及字段类型和限制等。如果不添加这些内容，API的信息也是可以获取到的，只是不是很全面而已。</p><p>描述Controller的注解：</p><p>  @Api describes the whole controller<br>  @ApiOperation is used for description on a methods level<br>  @ApiParam is used for method parameters</p><p>示例：</p><pre><code>@RestController@RequestMapping(&quot;/v2/persons/&quot;)@Api(description = &quot;Set of endpoints for Creating, Retrieving, Updating and Deleting of Persons.&quot;)public class PersonController &#123;    private PersonService personService;    @RequestMapping(method = RequestMethod.GET, path = &quot;/&#123;id&#125;&quot;, produces = &quot;application/json&quot;)    @ApiOperation(&quot;Returns a specific person by their identifier. 404 if does not exist.&quot;)    public Person getPersonById(@ApiParam(&quot;Id of the person to be obtained. Cannot be empty.&quot;)                                    @PathVariable int id) &#123;        return personService.getPersonById(id);    &#125;&#125;</code></pre><p>描述Model的注解：</p><p>示例：</p><pre><code>&#123;    @ApiModel(description = &quot;Class representing a person tracked by the application.&quot;)    public class Person &#123;    @ApiModelProperty(notes = &quot;Unique identifier of the person. No two persons can have the same id.&quot;, example = &quot;1&quot;, required = true, position = 0)    private int id;    @ApiModelProperty(notes = &quot;First name of the person.&quot;, example = &quot;John&quot;, required = true, position = 1)    private String firstName;    @ApiModelProperty(notes = &quot;Last name of the person.&quot;, example = &quot;Doe&quot;, required = true, position = 2)    private String lastName;    @ApiModelProperty(notes = &quot;Age of the person. Non-negative integer&quot;, example = &quot;42&quot;, position = 3)    private int age;    // … Constructor, getters, setters, ...&#125;</code></pre><p>支持JSR-303</p><p>  @NotNull    不为空<br>  @NotBlank   不为空 不为空字符串<br>  @Size(min = 1, max = 20)  字符串长度范围<br>  @Min(0)       最小值最大值设置<br>  @Max(100)<br>  @Pattern(regexp = “[SOME REGULAR EXPRESSION]”)   正则表达式设置  </p><p>做到上面几步就可以在api文档中看到效果了。类似如下：</p><p><img src="https://www.vojtechruzicka.com/static/57c53482f716c4648ec5d4c860c2a0e2/30398/swagger-ui.png"></p><p>或者采用不同的展示模板：</p><p><img src="https://static.oschina.net/uploads/space/2018/0716/075136_60JO_254762.png"></p><h2 id="Springfox原理"><a href="#Springfox原理" class="headerlink" title="Springfox原理"></a>Springfox原理</h2><p>Springfox生成Api文档的原理是，通过获取Spring上下文中<code>@Controller</code>以及<code>@RequestMapping</code>注解的Bean的信息，然后通过层层解析，最终按照Swagger的标准生成Api文档而得来的。</p><p>从RequestMappingHandlerMapping的一段源码上面看，就能够理解在<code>@Controller</code>和<code>@ResquestMapping</code>注解到一个Bean或其属性上之后，Spring做了什么，是如何用HandlerMapping将Http请求映射到响应的Bean的方法上的，以及是如何采用HandlerAdapter来处理Http请求的。</p><p>RequestMappingHandlerMapping中的两个关键方法：</p><pre><code>/** * &#123;@inheritDoc&#125; * Expects a handler to have a type-level @&#123;@link Controller&#125; annotation. */@Overrideprotected boolean isHandler(Class&lt;?&gt; beanType) &#123;    return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||            AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));&#125;private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) &#123;    RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);    RequestCondition&lt;?&gt; condition = (element instanceof Class ?            getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));    return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);&#125;</code></pre><p>Springfox获取Controller Bean信息的类图：</p><p><img src="https://raw.githubusercontent.com/heqiao2010/heqiao2010.github.io/master/img/2019/swagger.png"></p><p>参考：<br><a href="https://www.vojtechruzicka.com/documenting-spring-boot-rest-api-swagger-springfox/">https://www.vojtechruzicka.com/documenting-spring-boot-rest-api-swagger-springfox/</a></p><p><a href="https://www.v2ex.com/t/493395">https://www.v2ex.com/t/493395</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Swagger使用说明&quot;&gt;&lt;a href=&quot;#Swagger使用说明&quot; class=&quot;headerlink&quot; title=&quot;Swagger使用说明&quot;&gt;&lt;/a&gt;Swagger使用说明&lt;/h2&gt;&lt;h3 id=&quot;功能简介&quot;&gt;&lt;a href=&quot;#功能简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="Swagger" scheme="http://heqiao2010.github.io/categories/Swagger/"/>
    
    
    <category term="Api管理" scheme="http://heqiao2010.github.io/tags/Api%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>记录一个MySql count细节问题</title>
    <link href="http://heqiao2010.github.io/2019/01/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAMySql_count%E7%BB%86%E8%8A%82%E9%97%AE%E9%A2%98/"/>
    <id>http://heqiao2010.github.io/2019/01/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAMySql_count%E7%BB%86%E8%8A%82%E9%97%AE%E9%A2%98/</id>
    <published>2019-01-01T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180418.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"></p><blockquote><p>下面两条SQL查询结果会不一样吗？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select count(1) from </span><br><span class="line">  (select distinct &#96;handler_name&#96;, &#96;retry_info&#96;, &#96;is_disabled&#96; from handler) as alia;</span><br><span class="line"></span><br><span class="line">select count(distinct &#96;handler_name&#96;, &#96;retry_info&#96;, &#96;is_disabled&#96;) from handler;</span><br></pre></td></tr></table></figure><h3 id="count-语法"><a href="#count-语法" class="headerlink" title="count()语法"></a>count()语法</h3><p>（1）count(*)—包括所有列，返回表中的记录数，相当于统计表的行数，在统计结果的时候，<strong>不会忽略列值为NULL的记录。</strong></p><p>（2）count(1)—忽略所有列，1表示一个固定值，也可以用count(2)、count(3)代替，在统计结果的时候，<strong>不会忽略列值为NULL的记录。</strong></p><p>（3）count(列名)—只包括列名指定列，返回指定列的记录数，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），<strong>即列值为NULL的记录不统计在内。</strong></p><p>（4）count(distinct 列名)—只包括列名指定列，返回指定列的不同值的记录数，在统计结果的时候，在统计结果的时候，会忽略列值为NULL的记录（不包括空字符串和0），<strong>即列值为NULL的记录不统计在内。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于count（列名）时，为NULL时，不会统计在内，这个点，踩了个坑，这里记录一下，平时还是需要多注意下细节。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/wendychiang1991/article/details/70909958/">https://blog.csdn.net/wendychiang1991/article/details/70909958/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.hacpai.com/bing/20180418.jpg?imageView2/1/w/960/h/520/interlace/1/q/100&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面两条SQL查询结果会不一样吗？&lt;/p&gt;</summary>
      
    
    
    
    <category term="Mysql" scheme="http://heqiao2010.github.io/categories/Mysql/"/>
    
    
    <category term="MySql" scheme="http://heqiao2010.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>PropertyUtilsBean</title>
    <link href="http://heqiao2010.github.io/2018/08/25/PropertyUtilsBean/"/>
    <id>http://heqiao2010.github.io/2018/08/25/PropertyUtilsBean/</id>
    <published>2018-08-25T10:00:00.000Z</published>
    <updated>2020-10-22T06:46:15.600Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20181129.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"> </p><h3 id="beanutils包"><a href="#beanutils包" class="headerlink" title="beanutils包"></a>beanutils包</h3><p>beanutils，顾名思义，是java bean的一个工具类，可以帮助我们方便的读取(get)和设置(set)bean属性值、动态定义和访问bean属性；<br>细心的话，会发现其实JDK已经提供了一个java.beans包，同样可以实现以上功能，只不过使用起来比较麻烦，所以诞生了apache commons beanutils；<br>看源码就知道，其实apache commons beanutils就是基于jdk的java.beans包实现的。</p><h3 id="AopCacheUtil"><a href="#AopCacheUtil" class="headerlink" title="AopCacheUtil"></a><a href="https://github.com/heqiao2010/AopCacheUtil">AopCacheUtil</a></h3><p>之前在工作中，写了一个简单的自定义注解，后来自己凭印象写了个AopCacheUtil（还不完整），便于拦截DAO或者Controller层的方法调用，做缓存处理；当中就用到了PropertyUtilsBean，这个类。<br>在解析Bean属性的时候，挺方便的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.beanutils.PropertyUtilsBean.getProperty(Object, String)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/chenpi/p/6917499.html">https://www.cnblogs.com/chenpi/p/6917499.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.hacpai.com/bing/20181129.jpg?imageView2/1/w/960/h/520/interlace/1/q/100&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;beanutils包&quot;&gt;&lt;a href=&quot;#beanut</summary>
      
    
    
    
    <category term="Spring" scheme="http://heqiao2010.github.io/categories/Spring/"/>
    
    
    <category term="Java" scheme="http://heqiao2010.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何在jar包中读取配置文件 </title>
    <link href="http://heqiao2010.github.io/2018/08/02/%E5%A6%82%E4%BD%95%E4%BB%8Ejar%E5%8C%85%E4%B8%AD%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://heqiao2010.github.io/2018/08/02/%E5%A6%82%E4%BD%95%E4%BB%8Ejar%E5%8C%85%E4%B8%AD%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2018-08-02T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.825Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180215.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"></p><blockquote><p>今天开发的时候遇到一个问题——当程序以jar包运行的时候,有个txt配置文件无法获取到,但是本地测试无法复现.后来发现是因为以Jar包形式运行，文件无法访问到，这里记录一下。</p></blockquote><h3 id="1-如何判断当前进程是否以jar包形式运行的？"><a href="#1-如何判断当前进程是否以jar包形式运行的？" class="headerlink" title="1. 如何判断当前进程是否以jar包形式运行的？"></a>1. 如何判断当前进程是否以jar包形式运行的？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 是否以Jar包运行</span><br><span class="line"> * </span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isRunningInJar() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        String className &#x3D; GenericUtils.class.getName().replace(&#39;.&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">        String classJar &#x3D; GenericUtils.class.getResource(&quot;&#x2F;&quot; + className + &quot;.class&quot;).toString();</span><br><span class="line">        logger.info(&quot;classJar: &quot; + classJar);</span><br><span class="line">        return classJar.startsWith(&quot;jar:&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.warn(&quot;get Running status failed.&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-从Jar包中读取文件内容"><a href="#2-从Jar包中读取文件内容" class="headerlink" title="2.从Jar包中读取文件内容"></a>2.从Jar包中读取文件内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static String txt2String(String fileName) &#123;</span><br><span class="line">    StringBuilder result &#x3D; new StringBuilder();</span><br><span class="line">    BufferedReader br &#x3D; null;</span><br><span class="line">    try &#123;</span><br><span class="line">        Reader r &#x3D; null;</span><br><span class="line">        if (isRunningInJar()) &#123;</span><br><span class="line">            InputStream in &#x3D; GenericUtils.class.getResourceAsStream(File.separator + fileName);</span><br><span class="line">            r &#x3D; new InputStreamReader(in);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String path &#x3D; GenericUtils.class.getClassLoader().getResource(fileName).getPath();</span><br><span class="line">            File file &#x3D; new File(path);</span><br><span class="line">            r &#x3D; new FileReader(file);</span><br><span class="line">        &#125;</span><br><span class="line">        br &#x3D; new BufferedReader(r);&#x2F;&#x2F; 构造一个BufferedReader类来读取文件</span><br><span class="line">        String s &#x3D; null;</span><br><span class="line">        while ((s &#x3D; br.readLine()) !&#x3D; null) &#123;&#x2F;&#x2F; 使用readLine方法，一次读一行</span><br><span class="line">            result.append(System.lineSeparator() + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        logger.error(&quot;error when function:getTxtFromFile!&quot;, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (br !&#x3D; null) &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (final IOException ioe) &#123;</span><br><span class="line">            &#x2F;&#x2F; ignore</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.hacpai.com/bing/20180215.jpg?imageView2/1/w/960/h/520/interlace/1/q/100&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天开发的时候遇到一个问题——当程序以ja</summary>
      
    
    
    
    <category term="服务端" scheme="http://heqiao2010.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="http://heqiao2010.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Ngxtop的QPS监控</title>
    <link href="http://heqiao2010.github.io/2018/07/14/%E5%9F%BA%E4%BA%8ENgxtop%E7%9A%84QPS%E7%9B%91%E6%8E%A7/"/>
    <id>http://heqiao2010.github.io/2018/07/14/%E5%9F%BA%E4%BA%8ENgxtop%E7%9A%84QPS%E7%9B%91%E6%8E%A7/</id>
    <published>2018-07-14T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.825Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180309.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"></p><blockquote><p>之前参与一个公有云项目的开发，系统入口是公有云平台提供的LB。云平台的LB再将请求转发到后方的多台Nginx，Nginx上再做反向代理到后方的服务器。为了获取系统的QPS，我们在Nginx服务器上写了个定时任务脚本，定期采集并发量，然后汇总。</p></blockquote><h3 id="并发量采集脚本"><a href="#并发量采集脚本" class="headerlink" title="并发量采集脚本"></a>并发量采集脚本</h3><ol><li>先安装ngxtop<br>依次运行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br><span class="line">sudo yum -y install python-pip #安装python-pip</span><br><span class="line">sudo yum clean all #清除缓存</span><br><span class="line">sudo pip install ngxtop #安装Ngxtop</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：由于ngxtop是通过监控access.log文件来获取并发量的，因此nginx.conf中的access log一定要打开。</strong></p><p>安装好了之后就能得到当前这台nginx服务器上此时的并发量了。当然也可以通过一些参数对请求做一些过滤比如<code>ngxtop -i &#39;status &gt;= 400&#39; print request status http_referer</code>;我们获取的并发数是整个系统的，可以不过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">running for 10 seconds, 1035 records processed: 102.47 req&#x2F;sec</span><br><span class="line"></span><br><span class="line">Summary:</span><br><span class="line">|   count |   avg_bytes_sent |   2xx |   3xx |   4xx |   5xx |</span><br><span class="line">|---------+------------------+-------+-------+-------+-------|</span><br><span class="line">|    1035 |         4793.348 |   611 |   414 |    10 |     0 |</span><br><span class="line"></span><br><span class="line">Detailed:</span><br><span class="line">| request_path                                            |   count |   avg_bytes_sent |   2xx |   3xx |   4xx |   5xx |</span><br><span class="line">|---------------------------------------------------------+---------+------------------+-------+-------+-------+-------|</span><br><span class="line">| &#x2F;portal&#x2F;protocol                                        |     351 |            4.427 |    14 |   337 |     0 |     0 |</span><br><span class="line">| &#x2F;portal&#x2F;protocol&#x2F;onlines                                |142 |           29.585 |   142 |     0 |     0 |     0 |</span><br><span class="line">| &#x2F;fs&#x2F;group1&#x2F;M00&#x2F;38&#x2F;1A&#x2F;wKgBjVr-enmAUwbrAAA4icErDmQ64.html |      93 |         7019.968 |    93 |     0 |     0 |     0 |</span><br><span class="line">| &#x2F;fs&#x2F;group1&#x2F;M00&#x2F;20&#x2F;55&#x2F;wKgBK1rX-yGAGUzxAAA2uqGptGw07.html | 54 |         4009.000 |    54 |     0 |     0 |     0 |</span><br><span class="line">| &#x2F;portal&#x2F;getBindStatus                                   | 48 |           92.000 |    48 |     0 |     0 |     0 |</span><br><span class="line">| &#x2F;portal&#x2F;portalError.jsp                                 | 44 |         6481.818 |    44 |     0 |     0 |     0 |</span><br><span class="line">| &#x2F;fs&#x2F;group1&#x2F;M00&#x2F;3A&#x2F;C2&#x2F;wKgBjVsHZ2yADQyKAAA2BaQs3gQ79.html | 42 |        12323.667 |    41 |     1 |     0 |     0 |</span><br><span class="line">| &#x2F;fs&#x2F;group1&#x2F;M00&#x2F;39&#x2F;D5&#x2F;wKgBjVsDzz-AEZ_BAAA3KhsbE4Q76.html | 24 |         8877.833 |    23 |     1 |     0 |     0 |</span><br><span class="line">| &#x2F;fs&#x2F;group1&#x2F;M00&#x2F;3A&#x2F;C2&#x2F;wKgBjVsHZpKAcXlwAAA3pIzc9NQ54.html | 14 |         4051.000 |    14 |     0 |     0 |     0 |</span><br><span class="line">| &#x2F;fs&#x2F;group1&#x2F;M00&#x2F;3A&#x2F;C2&#x2F;wKgBjVsHZ4mAemZDAAA2Ifroljg77.html | 12 |         9739.083 |    12 |     0 |     0 |     0 |</span><br></pre></td></tr></table></figure><p>由于ngxtop命令，需要运行一段时间，才能计算出QPS值，因此我们不能获取这个命令的实时输出，而是需要延时后，取结果。通过如下的shell函数可以做到，延时输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">timeout() &#123;</span><br><span class="line"></span><br><span class="line">time&#x3D;$1</span><br><span class="line"></span><br><span class="line"># start the command in a subshell to avoid problem with pipes</span><br><span class="line"># (spawn accepts one command)</span><br><span class="line"></span><br><span class="line">command&#x3D;&quot;&#x2F;bin&#x2F;sh -c \&quot;$2\&quot;&quot;</span><br><span class="line"></span><br><span class="line">expect -c &quot;set echo \&quot;-noecho\&quot;; set timeout $time; spawn -noecho $command; expect timeout &#123; exit 1 &#125; eof &#123; exit 0 &#125;&quot;</span><br><span class="line"></span><br><span class="line">if [ $?  &#x3D; 1 ] ;  then</span><br><span class="line"></span><br><span class="line">echo  &quot;Timeout after $&#123;time&#125; seconds&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeout 5s &#x2F;usr&#x2F;bin&#x2F;ngxtop &gt;  $work_dir&#x2F;out.txt   #运行ngxtop命令5s，然后将输出重定向到text文件中。</span><br></pre></td></tr></table></figure><p>剩下的工作就是将qps值从命令中截取出来即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req_per_sec&#x3D;&#96;&#x2F;usr&#x2F;bin&#x2F;cat $work_dir&#x2F;out.txt|grep records |&#x2F;usr&#x2F;bin&#x2F;awk -F &#39;sec&#39; &#39;&#123;print $1&#125;&#39;|grep -oP -m 1 &quot;record.+&quot;|&#x2F;usr&#x2F;bin&#x2F;awk -F &#39;req&#39; &#39;&#123;print $1&#125;&#39;|&#x2F;usr&#x2F;bin&#x2F;awk -F&#39;:&#39; &#39;&#123;print $2&#125;&#39;&#96;</span><br></pre></td></tr></table></figure><h3 id="保证采集脚本在数台nginx服务器上并发执行"><a href="#保证采集脚本在数台nginx服务器上并发执行" class="headerlink" title="保证采集脚本在数台nginx服务器上并发执行"></a>保证采集脚本在数台nginx服务器上并发执行</h3><p>如何保证采集脚本在多台nginx上几乎同时执行呢——用<code>python-fab</code>实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># !&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import paramiko</span><br><span class="line">import root_path</span><br><span class="line"></span><br><span class="line">from fabric.api import *</span><br><span class="line">from fabric.context_managers import settings</span><br><span class="line">from fabric.contrib.files import exists</span><br><span class="line">from fabric.decorators import hosts</span><br><span class="line"></span><br><span class="line">from utillib import CommonUtil</span><br><span class="line">from utillib import MySqlUtil</span><br><span class="line">from ngxtop import NgxtopDao</span><br><span class="line"></span><br><span class="line">paramiko.util.log_to_file(&quot;filename.log&quot;)</span><br><span class="line"></span><br><span class="line">logger &#x3D; CommonUtil.getLogger(__name__)</span><br><span class="line">env.user &#x3D; &#39;root&#39;</span><br><span class="line">env.key_filename &#x3D; &#39;&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub&#39;</span><br><span class="line">env.hosts&#x3D;CommonUtil.get_value_list(&#39;ngxtop&#39;) # 取nginx机器列表</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">@parallel # 保证并发执行</span><br><span class="line">def collect_result():</span><br><span class="line">    if not exists(&#39;&#x2F;home&#x2F;azureuser&#x2F;auth-webserver&#x2F;ngxtop_statistics&#x2F;concurrent_statistics.sh&#39;):</span><br><span class="line">        run(&#39;mkdir -p &#x2F;home&#x2F;azureuser&#x2F;auth-webserver&#x2F;ngxtop_statistics&#39;)</span><br><span class="line">        put(&#39;&#x2F;home&#x2F;azureuser&#x2F;auth-webserver&#x2F;ngxtop&#x2F;concurrent_statistics.sh&#39;,&#39;&#x2F;home&#x2F;azureuser&#x2F;auth-webserver&#x2F;ngxtop_statistics&#39;) # 拷贝脚本</span><br><span class="line"></span><br><span class="line">    result&#x3D;run(&#39;sh &#x2F;home&#x2F;azureuser&#x2F;auth-webserver&#x2F;ngxtop_statistics&#x2F;concurrent_statistics.sh&#39;) # 执行脚本</span><br><span class="line">    #logger.info(result)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">@hosts(CommonUtil.get_value_list(&#39;ngxtop&#39;))</span><br><span class="line">def delete_script():</span><br><span class="line">    run(&#39;rm -rf &#x2F;home&#x2F;azureuser&#x2F;auth-webserver&#x2F;ngxtop_statistics&#x2F;concurrent_statistics.sh&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@task</span><br><span class="line">@runs_once # 入库保证只执行一次</span><br><span class="line">def save_to_database():</span><br><span class="line">    collected_output &#x3D; execute(collect_result)</span><br><span class="line">    create_time&#x3D;None</span><br><span class="line">    wrong_data_type&#x3D;False</span><br><span class="line">    create_time&#x3D;CommonUtil.get_local_time()</span><br><span class="line">    insert_table_name &#x3D; &#39;tbl_uam_ngxtop&#39;</span><br><span class="line">    for host, info in collected_output.iteritems():</span><br><span class="line">        logger.info(&quot;On host &#123;0&#125; last user was &#123;1&#125;&quot;.format(host, info))</span><br><span class="line">        data&#x3D;info.split(&#39; &#39;)</span><br><span class="line">        ngx_data&#x3D;&#123;&#125;</span><br><span class="line">        ngx_data[&#39;create_time&#39;] &#x3D; create_time</span><br><span class="line">        if(len(data) &#x3D;&#x3D; 2 ):</span><br><span class="line">            # 有些时候，取出的qps值中间可能会缺失一位，这里补5.</span><br><span class="line">            ngx_data[&#39;request_per_second&#39;] &#x3D; str(data[0]) + &#39;5&#39; + str(data[1])</span><br><span class="line">        else:</span><br><span class="line">            ngx_data[&#39;request_per_second&#39;] &#x3D; str(info)</span><br><span class="line">        ngx_data[&#39;ip&#39;] &#x3D; str(host)</span><br><span class="line">        NgxtopDao.save(insert_table_name,ngx_data)</span><br><span class="line">    logger.info(ngx_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    os.system(&#39;fab -f NgxtopCollector.py save_to_database&#39;)</span><br></pre></td></tr></table></figure><p>那么这个python脚本，通过crontab每5min触发一次，就能得到相应的qps数据了。</p><h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><p>用E-charts做了个表格，这样几个系统的qps值就可以采集到了。其实通过这个可以做一个简单的告警，比如当qps值到达4000时，发送一个告警邮件，或者告警微信消息。<br><img src="https://raw.githubusercontent.com/heqiao2010/heqiao2010.github.io/master/img/qps.png" alt="qps" title="qps"></p><p><img src="https://raw.githubusercontent.com/heqiao2010/heqiao2010.github.io/master/img/qps2.png" alt="qps" title="qps"></p><p>感谢<a href="http://yxs1112003.github.io/">YXS</a>编码实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.hacpai.com/bing/20180309.jpg?imageView2/1/w/960/h/520/interlace/1/q/100&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前参与一个公有云项目的开发，系统入口是公</summary>
      
    
    
    
    <category term="nginx" scheme="http://heqiao2010.github.io/categories/nginx/"/>
    
    
    <category term="服务端" scheme="http://heqiao2010.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>异步线程池优化</title>
    <link href="http://heqiao2010.github.io/2018/06/22/%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BC%98%E5%8C%96/"/>
    <id>http://heqiao2010.github.io/2018/06/22/%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BC%98%E5%8C%96/</id>
    <published>2018-06-22T10:00:00.000Z</published>
    <updated>2020-10-22T03:32:28.825Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.hacpai.com/bing/20180403.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"></p><blockquote><p>目前在公司做的一个无线Wi-Fi认证系统，采用公有云模式，24小时不间断服务，而且在上班时间会有业务并发的高峰，目前高峰值能到4000多的qps，在这个领域来说，还是比较高的。在这种场景下需要将一些操作异步执行，以提高页面的响应速度，比如某些情况下将大对象入库，可以采用异步线程去处理，这样在入库没有完成时，请求就可以返回（前提是入库失败，不需要通知给客户端）。那么如何创建异步线程，去执行这种异步操作，在保证效率的同时，还不能被高并发冲垮呢？</p></blockquote><h2 id="异步操作的几种实现方式"><a href="#异步操作的几种实现方式" class="headerlink" title="异步操作的几种实现方式"></a>异步操作的几种实现方式</h2><h3 id="直接创建一个新线程"><a href="#直接创建一个新线程" class="headerlink" title="直接创建一个新线程"></a>直接创建一个新线程</h3><p>继承或者实现Runnable接口都可以创建一个异步子线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public class TestThread1 extends Thread&#123;  </span><br><span class="line">    private boolean flag &#x3D; true;  </span><br><span class="line">      </span><br><span class="line">    public static void main( String args[])  </span><br><span class="line">    &#123;  </span><br><span class="line">        TestThread1 t &#x3D; new TestThread1();  </span><br><span class="line">        t.start();  </span><br><span class="line">        for( int i&#x3D;0; i&lt;100; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                Thread.sleep(1000);  </span><br><span class="line">            &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            System.out.println(&quot;I&#39;m MainThread.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        t.endSubThread();  </span><br><span class="line">        System.out.println(&quot;MainThread Stoped.&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    public void run()  </span><br><span class="line">    &#123;  </span><br><span class="line">        while( this.flag )  </span><br><span class="line">        &#123;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                Thread.sleep(1000);  </span><br><span class="line">            &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            System.out.println(&quot;----I&#39;m SubThread.&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(&quot;----SubThread Stoped.&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    public void endSubThread()  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.flag &#x3D; false;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>直接创建子线程可能会导致高并发请求时，创建线程耗费额外的时间，拖慢响应速度，也可能导致创建的线程数过多导致OOM，并且这种线程是一次性的，不能重用；这种方式，我们一开始就没有采用。</p><h3 id="采用固定大小的线程池"><a href="#采用固定大小的线程池" class="headerlink" title="采用固定大小的线程池"></a>采用固定大小的线程池</h3><p>线程池大小固定，避免请过多线程出现OOM的问题；而且线程可重用，以提升效率。如果并发数超过线程池大小，则任务会缓存到一个队列中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.heqiao2010;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ThreadFactory;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by h12111 on 2018&#x2F;6&#x2F;23.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class FixedThreadPool &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 当前线程池中线程数量</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private AtomicInteger currentThreadNum &#x3D; new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 线程池大小</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static final Integer POOLSIZE &#x3D; 8;</span><br><span class="line"></span><br><span class="line">    private volatile ExecutorService executor &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public FixedThreadPool()&#123;</span><br><span class="line">        this(POOLSIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FixedThreadPool(Integer poolSize)&#123;</span><br><span class="line">        this.executor &#x3D; Executors.newFixedThreadPool(poolSize, new ThreadFactory()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Thread newThread(Runnable r) &#123;</span><br><span class="line">                Thread thread &#x3D; new Thread(r);</span><br><span class="line">                thread.setName(&quot;FixedThreadPool&quot; + currentThreadNum.incrementAndGet());</span><br><span class="line">                thread.setDaemon(true);</span><br><span class="line">                System.out.println(currentThreadNum.get() + &quot; thread was created.&quot;);</span><br><span class="line">                return thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void execute(Runnable task)&#123;</span><br><span class="line">        this.executor.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private static AtomicInteger sum &#x3D; new AtomicInteger(1000);</span><br><span class="line"></span><br><span class="line">public static void main(String args[])&#123;</span><br><span class="line">    FixedThreadPool threadPool &#x3D; new FixedThreadPool(100);</span><br><span class="line"> for(int i&#x3D;0; i&lt;111; i++)</span><br><span class="line">        threadPool.execute(() -&gt;&#123;</span><br><span class="line">            while(sum.get() &gt; 0)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;: TestSum is &quot; + sum.get());</span><br><span class="line"> try&#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">  &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">                sum.decrementAndGet();</span><br><span class="line">  &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#x2F;&#x2F; 保证主线程不退出</span><br><span class="line">  while(sum.get() &gt; 0)&#123;</span><br><span class="line">        System.out.println(&quot;Not finish Yet!&quot;);</span><br><span class="line"> try&#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">  &#125; catch (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分输出如下，当一次性提交111个任务时，只创建了100个线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">97 thread was created.</span><br><span class="line">FixedThreadPool96: TestSum is 1000</span><br><span class="line">98 thread was created.</span><br><span class="line">FixedThreadPool97: TestSum is 1000</span><br><span class="line">99 thread was created.</span><br><span class="line">FixedThreadPool98: TestSum is 1000</span><br><span class="line">100 thread was created.</span><br><span class="line">FixedThreadPool99: TestSum is 1000</span><br><span class="line">Not finish Yet!</span><br><span class="line">FixedThreadPool100: TestSum is 1000</span><br><span class="line">FixedThreadPool2: TestSum is 997</span><br></pre></td></tr></table></figure><h3 id="线程池优化——采用丢弃策略的线程池"><a href="#线程池优化——采用丢弃策略的线程池" class="headerlink" title="线程池优化——采用丢弃策略的线程池"></a>线程池优化——采用丢弃策略的线程池</h3><p>查看<code>Executors.newFixedThreadPool</code>的源码会发现，<code>ThreadPoolExecutor</code>的构造参数中传入了一个阻塞式任务队列，而这个队列居然是没有限制大小的。因此，当高并发时，过多的任务不会使系统创建过多的线程，但是都会堆积在队列中，这样同样可能会导致OOM。实际上，采用上面的实现方式，我们用Jmeter做压力测试的时候，就出现溢出了，服务挂了，且不能自愈，于是做了下面的优化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) &#123;</span><br><span class="line">    return new ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">  0L, TimeUnit.MILLISECONDS,</span><br><span class="line"> new LinkedBlockingQueue(), &#x2F;&#x2F;这个队列的最大长度可以是：Integer.MAX_VALUE</span><br><span class="line">  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进如下，对于在阻塞队列满了之后的任务，可以采取丢弃处理的策略，保证服务本身的安全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">package com.heqiao2010;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 一个可以丢弃任务的线程池</span><br><span class="line"> * Created by heqiao on 2018&#x2F;6&#x2F;22.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class DiscardableThreadPool &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 当前线程池中线程数量</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private AtomicInteger currentThreadNum &#x3D; new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    private volatile ExecutorService executor &#x3D; null;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 任务丢弃策略&lt;&#x2F;&gt;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static class DiscardPolicy implements RejectedExecutionHandler&#123;</span><br><span class="line">        public DiscardPolicy()&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 只是简单的打印了个日志</span><br><span class="line">         * @param r</span><br><span class="line">         * @param executor</span><br><span class="line">         *&#x2F;</span><br><span class="line">        @Override</span><br><span class="line">        public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) &#123;</span><br><span class="line">            System.out.println(&quot;Task &quot; + r.toString() + &quot; rejected from &quot; + executor.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Builder &#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 线程名前缀</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private String threadNamePrefix &#x3D; &quot;DiscardableThreadPool&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 线程池中最小线程数</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private Integer corePoolSize &#x3D; 16;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 最大线程数</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private Integer maximumPoolSize &#x3D; 128;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 线程超时回收时间</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private Long keepAliveTime &#x3D; 5L;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 线程超时回收时间单位</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private TimeUnit timeUnit &#x3D; TimeUnit.MINUTES;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 任务队列大小</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private Integer queueCapacity &#x3D; 500;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 丢弃策略</span><br><span class="line">         *&#x2F;</span><br><span class="line">        private RejectedExecutionHandler handler &#x3D; new DiscardPolicy();</span><br><span class="line"></span><br><span class="line">        public Builder namePrefix(String prefix)&#123;</span><br><span class="line">            this.threadNamePrefix &#x3D; prefix;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder minPoolSize(int minPoolSize)&#123;</span><br><span class="line">            this.corePoolSize &#x3D; minPoolSize;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder maxPoolSize(int maxPoolSize)&#123;</span><br><span class="line">            this.maximumPoolSize &#x3D; maxPoolSize;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder keepAlive(long keepAliveTime, TimeUnit unit)&#123;</span><br><span class="line">            this.keepAliveTime &#x3D; keepAliveTime;</span><br><span class="line">            this.timeUnit &#x3D; unit;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder queueCapacity(int capacity)&#123;</span><br><span class="line">            this.queueCapacity &#x3D; capacity;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder rejectedHanlder(RejectedExecutionHandler handler)&#123;</span><br><span class="line">            this.handler &#x3D; handler;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public DiscardableThreadPool build()&#123;</span><br><span class="line">            return new DiscardableThreadPool(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 构造子</span><br><span class="line">     * @param builder</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private DiscardableThreadPool(Builder builder)&#123;</span><br><span class="line">        if(null &#x3D;&#x3D; executor)&#123;</span><br><span class="line">            &#x2F;&#x2F; 线程工厂</span><br><span class="line">            ThreadFactory threadFactory &#x3D; new ThreadFactory() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public Thread newThread(Runnable r) &#123;</span><br><span class="line">                    Thread thread &#x3D; new Thread(r);</span><br><span class="line">                    thread.setName(builder.threadNamePrefix + currentThreadNum.incrementAndGet());</span><br><span class="line">                    thread.setDaemon(true);</span><br><span class="line">                    System.out.println(currentThreadNum.get() + &quot; thread was created.&quot;);</span><br><span class="line">                    return thread;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            &#x2F;&#x2F; 任务队列</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue &#x3D; new LinkedBlockingDeque&lt;Runnable&gt;(builder.queueCapacity);</span><br><span class="line">            &#x2F;&#x2F; 初始化</span><br><span class="line">            executor &#x3D; new ThreadPoolExecutor(builder.corePoolSize, builder.maximumPoolSize, builder.keepAliveTime, builder.timeUnit,</span><br><span class="line">                    workQueue, threadFactory, builder.handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 执行一个异步任务</span><br><span class="line">     * @param task</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void execute(Runnable task)&#123;</span><br><span class="line">        executor.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;DiscardableThreadPool&#123;&quot; +</span><br><span class="line">                &quot;executor&#x3D;&quot; + executor +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isShutDown()&#123;</span><br><span class="line">        return executor.isShutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isTeminated()&#123;</span><br><span class="line">        return executor.isTerminated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.heqiao2010;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 测试！</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    private static AtomicInteger sum &#x3D; new AtomicInteger(1000);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">         &#x2F;&#x2F;最多100个线程，队列大小是10个，理论上最大并发支持到110</span><br><span class="line">        DiscardableThreadPool threadPool &#x3D;</span><br><span class="line">                new DiscardableThreadPool.Builder().minPoolSize(8)</span><br><span class="line">                    .maxPoolSize(100).keepAlive(1, TimeUnit.MINUTES)</span><br><span class="line">                    .namePrefix(&quot;Test&quot;).queueCapacity(10)</span><br><span class="line">                        .build();</span><br><span class="line">          &#x2F;&#x2F;一次性提交111个任务</span><br><span class="line">        for(int i&#x3D;0; i&lt;111; i++)</span><br><span class="line">        threadPool.execute(() -&gt;&#123;</span><br><span class="line">            while(sum.get() &gt; 0)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;: TestSum is &quot; + sum.get());</span><br><span class="line">                try&#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                sum.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 保证主线程不退出</span><br><span class="line">        while(sum.get() &gt; 0)&#123;</span><br><span class="line">            System.out.println(&quot;Not finish Yet!&quot;);</span><br><span class="line">            try&#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分输出如下，可见在线程池满了，而且队列也满了的情况下，任务就会被丢弃掉了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Test98: TestSum is 1000</span><br><span class="line">100 thread was created.</span><br><span class="line">Test99: TestSum is 1000</span><br><span class="line">Test77: TestSum is 1000</span><br><span class="line">Test68: TestSum is 1000</span><br><span class="line">Test72: TestSum is 1000</span><br><span class="line">Test76: TestSum is 1000</span><br><span class="line">Test80: TestSum is 1000</span><br><span class="line">Test84: TestSum is 1000</span><br><span class="line">Task java.util.concurrent.FutureTask@1e80bfe8 rejected from java.util.concurrent.ThreadPoolExecutor@66a29884[Running, pool size &#x3D; 100, active threads &#x3D; 100, queued tasks &#x3D; 10, completed tasks &#x3D; 0]</span><br><span class="line">Not finish Yet!</span><br><span class="line">Test92: TestSum is 1000</span><br><span class="line">Test88: TestSum is 1000</span><br><span class="line">Test81: TestSum is 1000</span><br><span class="line">Test100: TestSum is 1000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.hacpai.com/bing/20180403.jpg?imageView2/1/w/960/h/520/interlace/1/q/100&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前在公司做的一个无线Wi-Fi认证系统，</summary>
      
    
    
    
    <category term="服务端" scheme="http://heqiao2010.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="http://heqiao2010.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
